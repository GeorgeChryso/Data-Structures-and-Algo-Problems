// Problem Statement
//     	You have been given a String[] picture. Each character in picture represents a space in the picture. A 'B' designates a space that needs to be painted black, and a 'W' denotes a space that must be painted white. The painting device you have been given only makes horizontal strokes, of any length, exactly one space high. In addition, it can only use 1 color at a time. Due to the nature of the paint, a space cannot be painted twice. For example, the following picture could be colored in 6 distinct strokes:
// picture = {"BBBBBBBBBBBBBBB",
//            "WWWWWWWWWWWWWWW",
// 	   "WWWWWWWWWWWWWWW",
//            "WWWWWBBBBBWWWWW"}
// You would use 1 stroke for each of the first 3 lines, and then 3 strokes on the last line.



// This wouldn't be an issue if we had forever to paint the picture. Unfortunately, you only have enough time to make at most maxStrokes distinct strokes. Any more strokes would put you past your deadline. Since finishing on time is more important than getting it perfect, you are willing to mispaint some of the spaces. Return the fewest number of spaces that can be mispainted while still using no more than maxStrokes strokes. An unpainted space is considered mispainted.
 
// Definition
    	
// Class:	MiniPaint
// Method:	leastBad
// Parameters:	String[], int
// Returns:	int
// Method signature:	int leastBad(String[] picture, int maxStrokes)
// (be sure your method is public)
    
 
// Constraints
// -	picture will contain between 1 and 50 elements inclusive.
// -	Each element of picture will contain between 1 and 50 characters inclusive.
// -	Each element of picture will contain the same number of characters.
// -	Each character in each element of picture will be (quotes for clarity) 'B' or 'W'.
// -	maxStrokes will be between 0 and 3000 inclusive.



//instead i m gonna calculate the max number of cells i can paint with k strokes 
// let dp[i][j][k] be the max number of cells i can paint with k strokes from the beginning up to cell i j

//close but no cigar, what's actually wrong in this approach is the way i pick my best result
// nobody can ensure that the prevLineHighest is the appropriate one to be taken,
// because I may have to choose to waste 1 stroke on a line to get more cells painted down the road.
var minipaint=(A,maxStrokes)=>{
    let n=A.length,m=A[0].length

    let dp=[...Array(n)].map(d=>[...Array(m)].map(d=>[...Array(maxStrokes+1)].map(d=>0)))
    dp[0][0][1]=0 // with 1 stroke i can paint 1 cell (the first cell)
    for (let k = 1; k <=maxStrokes; k++) {
        for (let i = 0; i <n; i++) {
            let prevLineHighest=1
            for (let j = 0; j <m; j++) {
                    prevLineHighest=Math.max(prevLineHighest,i>=1?dp[i-1][m-1][k-1]+1:1)
               
                    dp[i][j][k]=Math.max(dp[i][j][k],prevLineHighest)
                    //for every previous cell of this row
                    for (let p = 0; p <j; p++) {
                        if(A[i][p]===A[i][j])       // ignore all the previous items of this line(paint only with this color)
                                                    // continue painting with the same color 
                                                    // paint with a new stroke (of this color)
                                                    // dont paint it 
                            dp[i][j][k]=Math.max(prevLineHighest,dp[i][p][k]+1,dp[i][j][k])                    
                        else
                            dp[i][j][k]=Math.max(prevLineHighest,dp[i][p][k-1]+1,dp[i][j][k])                    
                    }                  
  
                }                      
        }        
    }
    let result=Infinity
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < m; j++) {
            for (let k = 0; k <=maxStrokes; k++) {
                result=Math.min(result,n*m-dp[i][j][k])            
            }
        }        
    }
    return result
}

//let's see. For each row i want to calculate an array of length maxStrokes+1, 
// maxPainted[i]= Max cells painted for this row with i available strokes.
var minipaint=(A,maxStrokes)=>{
    let n=A.length,m=A[0].length
    , maxPainted=[...Array(n)].map(d=>[...Array(maxStrokes+1)].map(d=>0))
    , dp=[...Array(n)].map(d=>[...Array(m)].map(d=>[...Array(maxStrokes+1)].map(d=>0)))
    for (let k = 1; k <=maxStrokes; k++) 
        for (let i = 0; i <n; i++) 
            for (let j = 0; j <m; j++) {               
                    dp[i][j][k]=1 //i can always just paint the damn thing alone
                    //for every previous cell of this row
                    //consider painting it and then painting my current cell j
                    for (let p = 0; p <j; p++)
                        if(A[i][p]===A[i][j]) //if the cells are the same, i dont need to use an extra stroke
                            dp[i][j][k]=Math.max(dp[i][p][k]+1,dp[i][j][k])                    
                        else//however if they are,im using an extra stroke( going from k-1 to k)
                            dp[i][j][k]=Math.max(dp[i][p][k-1]+1,dp[i][j][k])                    
                                      
                    maxPainted[i][k]=Math.max(maxPainted[i][k],dp[i][j][k])//store the maximum cells I can paint with k strokes
            }             
                
    //this is where the knapsack VARIANT happens: 
    // Essentially I want to maximize the sum of my selection of strokes 
    // For each row, I can pick maximum of 1 item. Thing is,I have a constraint of my total
    // strokes used, so I will create an array of possSums whose index represent the sum I wanna reach, and values represent the MINIMUM strokes needed to reach that very sum. 

    // so possSums[k]=min Number of strokes needed to reach sum K 
    let result=0,possSums=[...Array(n*m+1)].map(d=>Infinity)
    
    //basecase, I can paint 0 cells with 0 strokes
    possSums[0]=0
    for (let i = 0; i < n; i++) {
        let curr=maxPainted[i],
            temp=[...possSums]// I create a clone of my possSums,
            // where for each row, I intend to alter It instead of the original array
            // in order to avoid cases where two items from the same row contribute to 
            // the same sum, which of course is incorrect.

        for (let stroke = 0; stroke <=maxStrokes; stroke++) {
            let maxCells=curr[stroke]           
            //so the way this happens is : 
            for (let sum = 0; sum <=n*m-maxCells; sum++) {
                let oldWeight=possSums[sum]//consider if UP until now, the sum was possible
                if(oldWeight==Infinity)// if it wasnt possible, i cant extend it with my maxCells
                    continue;
                // <GAME CHANGER THAT ALLOWS 1 PICK PER ROW 
                let minWeight=temp[sum+maxCells]//now, consider extending it by sum+maxCells

                // ALTERING THE TEMP ARRAY INSTEAD SO MY POTENTIAL RESULTS ARE NOT AFFECTED BY THE 
                // SUMS THAT WERE ALLOWED DURING THE SAME ROW 
                temp[sum+maxCells]=Math.min(minWeight,oldWeight+stroke)
                
                if(temp[sum+maxCells]<=maxStrokes)
                    result=Math.max(result,sum+maxCells)    
            }
        }
        possSums=temp
    }
    return n*m-result // returning the total number of cells minus the maximum I can paint with maxStrokes
}
let results=[2,781,509,865,1,5,130,136,768,592,849,0,6,223,241,33,0,219,87,5,
    333,
    0,5,60,40,0,777,425,721,390]
console.log('--------------------------------------\nRETURNED\tWANTED\tRESULT\n--------------------------------------')
let testcases=[
    [['BBWWB','WBWWW'],3],
    [["BBWWWBBBWWBBBBBBBWWWBWWWBBBWWBBBWWBBBWBWWBWWBBWBWB", "BBWWWWWWBBWWBBBBBWBWBBBBBWWBBWBBBBBWWBBWWBWBBWBBBB", "BWWBWBWWWBWBBWBBBWBBWBBWBBWWBWBWWWWWWBWBWBWWWBWBBW", "BBBBBWBWWWWBBBBWWBWBWWBWWBWWBBWBWBWBWWBBBBBWBWWWWB", "WWWWBWWBBBBBWBBWBBBWWBWBWBWWWBWBBWWBBWWBWBWBBWWBWB", "WWWBWWWBWBWBWBBBBWBWWBBBWBWBWBWBWBWWBBWBBBWBBBBBBB", "WWBWWWBWWBWBBBWBBBBBWBBBWBBBBWWWBWBWWBBWWBWBWBBWBB", "BWWWWBBBBBWBBWBWBWWBWBBWBBWWBBWWBBBBBBBWBWWWWWBWBB", "BBBBBBBWBWWWBWBBWWBWBWWWBWBBBWBBWWWBWWBWBWBWWBBBWB", "BBBBBWWWBBBBBBWWWBBWBBBWBBWBWWWBBWBWWWWBWBBBWBWBBB", "WWWBWBWBWWBWWBBBBBBBWWWBBBWBWWBBWWWWWWWWWWWBBWBWBW", "WBBWWWWWWBWBBWBWBBBBWBBBBWBWBBWWWWBWWBBBBWBWBWBWBW", "WBBWBWBBWBWBWBWWWBBWBBWBBBWWBBBWWWBBBBWWBWWWBWBWWB", "BWWWWBBWBWWBWWWWWBBWWWBWWWBWBBBBBWWBWWBBBBWBWBBWBB", "BBWWWBBWWBBWWWWBWWBBBWBBBBBWBWBBBBWWWWWBBWWBBBBWBB", "BBWWBWBBBWWWWBWWWBBWBBWBBBBWWBBBWBBBBWBBWWWWBWBWWB", "WBBBWWWWBBBBWWBWWWBWWWBWWBWWBBWWWBBBWBBBWWWWWWWWWB", "WBBBWBBBBBBBWBBBBBBWWWWWWBBBWBWWWBBBWBBBWBBWWWBBWB", "BBWBWWBWWWBWBBWBWBBWWWWWBWBWBWWWWWWBWBWWWWBBWBBBBW", "WWBBWWBBWWWWWWWWBBWBWBBWWBBBWWWBBWWWBBWWWBBWWBBBBB", "BWWWWWBWBBWBBWWWWWBWWWBWBBWBBBBBWWWWWWWBBWWBWWWWBB", "WBBBBWWWBWWBBWWBWWBWWWBBWWWWBBWBBBWWWBWWWWWWBWWBWW", "BWWBWWBBWWBBWWBBWWBWWWWBWWWWWBBBBBBWBWWWWBBBBWWWBW", "WWBWWWWWWWWWBWWWBWWBBWWWWWBBWWBBWWBWWWWBWWWWWBWBWW", "WBBWWWWBWBWWBWBWBBBBBBBWWWBWWBWBWWBWBWBBBWWBWWBBBB", "WWBBBWBBBBBWBBWWBBBBWBWBWBBBBWBBBWBBBBWWWWBBBWBBBW", "WWWWWBWBBBBWBBWBWBWBBWWWWWBWWBBWBBWBWWWWWBBWBBWWWW", "WBWBBWBWBWWBWBBBWBWBWBWWBBBBBBBBWBWWBBBBBBWWBBWWWW", "BBBWBBBBBBWWBBBWWWBBWBBWWBBBBBBWBBBWBWBBBBBWWBWWWW", "WBBWBBWBWBBWWWBBBBBWBBWWWBBWWWWBBBWBWBWBBBWBBWBWBB", "BWWBWWWWWWBWBWBWWBWWWWWWWBWWBWWBWBBWBWBWWWWBBBBBBW", "BWWBWBWWWBBBBWWWWWWBBWBBBWBWBWWBWWBWBWBWBWBBBBWBWB", "BWWBWWBWBWBBBWWBBBBWBBWBWBBWBBWBWWBWBBBBBWWWBBBWWW", "BBBWWWWBBWBWWBBBWWBBBBWBBBBBWBWWWBBWBWBBWBWBBBBWBW", "BWBWBBWBBBBWBWBBBBWWWWWWWWWWBWWWWWBBWWWWWWWBBBWWWW", "BWWWWBBBBWBWWBBWWWWWWBBBBBBBBWWBBWBBWWWWWBWWBWWBWB", "BWBWWBWBWWWBWBWWBWBWBBBBWWBBWWWBBBWWWBWWWBWBWWWWWB", "BBBBBBBBWWWWWWBBBBWWBWWWWWWBWWWBBWBBBBWBWBWWBWWWWW", "BBBWWBWWWBBBBBBBBWWWBBBWWWBBBWBBBBWBBBWWBWBWWBBWBB", "WBBWWBBWWWBBBWBBWWBBWWBBBBBWWBBWWWBBWWBBBWBBBBWWBW", "BWWWWBBBBBWBWWBBBWWBWWBWBWBBWBWBWWWWWWBBWWBBBWBWWW", "BWBWWBWWBWBWWWWBWWBBBWWBBWBBBBBBWWBBBWWWWWBBBWWWBB", "BWBWWWWWWBWWBBWWBWBWWWWWWWWWWWBBBBWBBBWBWWBWWBBWBW", "BBBBBWBBWBWWBWBBBBBWWBWWWWBWWWWBBBBBBWWBBWBBBBBBWW", "BWBBWWWWWBWBWWBWBBWWBBWWWBWBBBWWWBWWBWWBWBWBWWWWBB", "BBWBBBWBWBWBBBBWBWWBBWBWBBWBBBWBBBWWBBBWBBBWWWBBWB", "WWBWBBBWWBWWWWWBBWBBWBBWWBWBWWWBBWBBBWBBBWBWBBBBBW", "BWBBWBWBBBBBWWWBBWWBWWBWWWBBWBWWBBWBBWWWWWBWBBWWWB", "WWWWWWWBBBWBBBBBWWWWWBBWWBWBWBBBWWWWWWBBWBWWBWWWWW", "BBBBWWWWWBBBWBWWBBBBWBBWBBWWBBBBWWBWWBBWWBBBBBBBBW"],132],
    [["BBWBWWBWBBBWBWBBBWBWWWWBBWWBWBBBWBBWBWBBBWBBBWWWWB", "WWBWBBBBBBBWWWWBBBBWBWWBWWWBWBWWBBWWWWBBWBWWBBBBWB", "WWWBWBWWBBBBWWWBWWWBBBWBBWBWWBWBBWBWBBBBWWWWBWWWWB", "WBBBBBWBWBBWBWBWBBBWBBWWBBBBBWWWBWWWWBBBBBWWBBWBWB", "BBBBWBWWBWBBBBWWWWBWBBWWWWBWBBWBWBWWBWWBWWBWBWWWBW", "WWWWBWBWBBBWWWWWWWBBBBWWBBWWWBBWBWWWBWBWWBWBBWBWBB", "BWBBBBBWWWWBWWWWBWWWWWBBBWBWBWWWBWWBWWWWWWWBWWBBBB", "BWWBWBWWWBBBWBBWBWWBBWWBWWWWBWWBBWWWWWBBWBBBBWBWBW", "BBWBWWWWBWWWWBWBWWBBWBWBBBBBBWWBWWWWBBWWBBWBBBBBBW", "BBBBBWWBBBWWBWWBBWBWBWWWWWBWWBBBWBWWBBBWBWWBWBWBBW", "WWWWWWWBBBWWWBWBWBBWBBWBBBBWBBBBWWBWBBBWBWBWBWBBBB", "BBWWWBWBWWWBBBBWWBBWBBBWBBWBWBWBWBBWWBBWWWBBBWBBBW", "WBBWWBWBBBBWBBBBBWBWBBWWBBWWWWWBWWBBBBBBBBBBBBWBBB", "WBBWBBBBBBBBWWWBBBWWBBBWWWBBBBWBWWBBWBBBWBWBWWBBWW", "WWBBWBBWWWBBBBWWBWWWWWBWWBWBWBBBWWWBWBBBBWWBBWBWWB", "WWBWWBBBWWBBBWWBWWWWWWBBBBBWBWWBWBBWBWWWWWWBBBBWWW", "BBWBBWWWWBWBWWWBBWWWWWBBBWWWBBWBWWWBWBWBBBBWWWBWWW", "WBWBBWWWWWBBBBWBWBBBWWWWBBWBBWBWBWBBWBWWWBBBWWWBWW", "WWBBWBBBWWWBWWBBBWBWBWWBBWBWWBWWBBBBBBBWBBBBWBBWWB", "WBWWBBWBWBWBWBBBWWWWBWWBBWBWWBBWWWBWBBWBWWBBWBWBWW", "WBWBWWWWBWWBBWBWWBBWWBWBWBWWBWBWBWBBBBWBBBBBWBBWWB", "WWBBBBBBBBBBBBBBBBBWBWBBWBWBWBWBWBBBWBWWBWBBWBWWBW", "BBBBWBBWBBWBWWBWBBWWWWWBWBWWBBWBBBBBBBBWWBBBWBWWBW", "BWWWWWBBBBWBWWWBWWBWBWBBWBBBBBBWBWBWBBBWWBBBBBBWBW", "BBWWWBBBWWBBWWWBBWBBBBBWWWWWBBBWWWWWBWWWBWWWBWWWBW", "WWWBWWWBBBWBBWWWWWWWWWWBBBBBBBWWWBWBWBBWBBWWBWWBBW", "WWWWWWWBBBWWBBBBWWBWBBBBWBWWBBWBBWWWWWWBWWBWBBBBBW", "WWWWWBBWBBWBWBWWWBWWBBWWWWBWBBBBBBBWWBWBBBBBWWWBBB", "WBWBWWWBBWBBBWWWBBBWWBBWWBBBBWWWBWWWWWWBWWWWBWBBBW", "BBWBBBBWWBWBWWBWBWBWBWWBWBWWBBWBBWWWWBWWBWWBWBBBWB", "BWBBWWWBBWBBWBWBWWWWWWWBBBBWWWBWBWBWWWWBWWWBWWBWBW", "BWBWWWWBBWBBBBBWWBWWBWWBBBWBBBBWWWWWWBBWBWWBBBBWBB", "WBBBBBWWWBWBWBWWWWBBBBWBWBBWBWWBBBBWBWBWWWWBWWBWBW", "WBBWWWWWWWWWBWBWBWBWWBBBBWBBBWWBWWBWBWBBWWWBBWWBBB", "BBBBWBBWWBWBBBWBWWWWWWBWWWWBBBBWWWBWWBWWWBBWBBBWBW", "WBBBWBWWBBWWWWWWWBWWWWWBWBBWWBWBBWWBBWBWWBWBWBBBBB", "WBWBWBWWBBWBBBBBBBBBBBBBBWWWBBWWBWWBBWWBWBWWWWBBBB", "WWWBWBBBWBWWWBBBBWWBWBBBBWWBBBBWWBBBBWWBBBBBWWWWWW", "WBWBBWBWBWWWWWBWWBWBBBWWBBWBWWWWBBBWWBWBBBBWWWBWWW", "WBBWBBWWWBWBBWWWBBWWWWWBBWWWWBBBWWBWWBWBWWBWBBWWBW", "BBBBBBBBBWWWWBWBBWWWBWBBBWBBBBWBWWBBWBWBWBWBBBBWWB", "WBWBBWWWWBBBBWWBBWWWWWBWWBBBWWBWBBBBWWBBBBBBBBBWBW", "BBBWBBWWWWWWWWBWBBWBBBWBBBBBWWBWBWWWBBBBWWBWWWWWBW", "BWWWWBWWBBWWWBBBWBWWWBWWWWBWWBWWBWWWWWWWWBBWWBWWBW", "WWBBWBBWWBBWWWBWWBWWWWWBWWWWBWBBWBWBWBBWWBBWWBWWWW", "BWBWWWWWBBBWWWBWWWBWBWBWWBWBBWBWWBBWWWWBBBBBBWWBWW", "WWBWBWWBBWBWBWBBBWWBBWWBBBWWBBBWWBBBWWBWBBBWWBWWBW", "WWWWBWBWWBBBWBBBWBWBBBBBBWBBBWBWWWWWBWWWWWBWBWWBBB", "BWBWWBBWWBWWWWBWBWBWBBBWBBBBWWBBBBWBWWBWBBBWBBWBBB", "BBBWBWWWWWBBWBBWBWBBWWWBWBBBBBBWBWBBBBWBWWWWWWWBBB"],354],
    [["BBBBBWWWWWBWWWBBWWWBWBBWBBBWWWBBWBBBBWWWWBWBWWBWWW", "WBWWWBBBWBBWBBBBBBWBWWBBBWWBBWBBWWWBBBBWBWWBWWBWWW", "BWBBBBBWWBBBBWWBWWBWWWBBBWBWWBBWBBWWWBWBBBBBWBBWWB", "WBWBBBBBWWBWBBWWWBWBWWWWBWWWWWBWBBWBWBWBWWBWBWWBBB", "BWBBWWWBWBBWBBBWWBBWBBWWBWWBWBBBWBWBBBBBBBWBWWBBWW", "BWBWBWBBWWWWBBBBWBWWWWBBWBBBBWBBBBBBWBWWWWBBWBBBBB", "BBWBWBWBWBWBWWWWWWBBWBBWWBBBWWBWBWBWWBBBBBBWBBBWBB", "WBBWBWWWWBWBWBBBWBWBWWWWBBBBWWBBBWWBWWWWWWWWWWWWBB", "WWBBWWBWWBBWWWWBWWWBBBBBBBWBWWWWBWBWWWBWBBWBBBBBBB", "WBWBWWBWWBBWBWWBBBWBWBWWWWWWBBWWWWWWWBWWBBWBBWWWBW", "WWBBWBBBWWWWBBWBWWWBWWWBBWWWBBBBWWWWBBBBWWWBWWBBBB", "WBBWBWWWBBWWBWBWWBBWWWBWWBWBBBWWWBWBBBBBWWWBBBBBWB", "BWWWBBBBWBBWBBBWWWWWWWBBWBBBWBBWBBBBBWWWBWWBWBWWBW", "BBWBWWBWWBBBWBBWWBWBWWBBWBBBBWBBWBWBWWWWBWWWBBWWWW", "WBWWWWWBBBBWBWBWBWBBBBBWWBBWWWWBWBBBWWWWBWWWBWWBBW", "WWWBWWWWWBWWWBWBWBWBWBBBBWBWBWWBBBWWBWWBWBWWWWBWBW", "WWWWBBBBBWBBBBWWBBWBWWWWBBBBWWWWWBWWBBWBWBWBBWBBBB", "BBBBWWWBWWBWWWWWBBBWBWBBWWWBWBWWBWBWBBWBBBWBWBBWBB", "BWBWBWWWBBWWWBBBBWWBWBBWWWWBBBBBBWWBBWWBBWBBBWBBBW", "WWBBBBWBBWWBWBBBWBWBBWBWBWBBWBBWWWBBWBBWWWBBWBWWBB", "WBWBBWBBWBWBBBBWBBWWWWBWWWBWWWWBWWBBBBBBWBWWWWWBWB", "BBWWWBWBWBBWBBBWWBBBWWBBBBBBWWWBWWWWBBBWBWWWWWWBWB", "WBWWWBBBWWWWBBWWWWWWBBWBBWBWBBWBWWBWWWBWWWWBWWWWBB", "BWWBWBBWWBBWBWWWWBBWWBWBBWBWBWBWBBWWWBWBWBBWBWBWWW", "BWBWBWWWWBWWBBBBWBWWWWWBWBWWBBWBBWWBBWBWWBBWWBBBWB", "WWWWBWWWWBBWBWBBWBWBBWBBBWWBWWWWWBWWWBWWWWWWBBWBBB", "BBWBWBWWBWBWBBWBWBBWWBBWWBWWBBWBWWWWWWWBWBBBWBBWWB", "WWWBBBWBBWWWBBWBBBWBWWBBBWWBBWWWWWBWBBWWWBBBWWBBWB", "BBWBBBWBBBWWBBWWBWWWBBBWWBBWBWBBWWWBWBWBBWWWWWBBWB", "BBBBWWBWBWBWBWWWWWWWBWWWWWWWWWBBBBWWBBBWBBBBBWBBBB", "BWBWWBBBBWWBWWBWBWBBWWBWBBBBBWBWBWWBBBWWWWBBWWBWBB", "WWBBBWWWBBBWBBWWBBWBWWBBWBWBBWBWWWWBBBWWBWBWWWWBBB", "BWWWWBBBWBBWBBBBWWBBBBBBBWBWBWBBWBBWBWBWWWWWBWWWBB", "BBBBWWWBBBBBWBWWWBBWBWWWWWBBWBBWWWWBWWWWWWBWWWWBBW", "WWWBWBWWBBWWWBWBWWWBWWBBWWWBBBWBBWWBWWBBWBBWBWBBWB", "BWBBBBBBBBBWBBWBWWBBWBWWWWBWWWBBBWWWBBBWWBBWBBBBWW", "WBWBBBBWWWWWWBWWWWBBBBBWBBWBBBBBWWBWBWBBBBWBWBBWBW", "WWBBWBWBBBWWWWBBBBWBBBWBWWWWBBBWWWWBBWWBBWWWWWWWWB", "WWWBBBWBBWWBWBBBBWBBBWWWWBBWWWWBWWBBWWWWBWBWBWWBBW", "BWBBBWWBBBWWBBWWBWWWBBWWBBWWWBWBWBBBWWWBWWWBWWBWBW", "WBBWBBBWBBBWBBWBWWWWBBWWWBBBWWWBWWWBWWBBWWWWBBWBBB", "WWWWWWBBBBWBBWBBBWWWWBBWBBWBBWWBBBBBBBBBWBBBWBWWWW", "BWWWWBBWBWBWBWWBWWBBBBWWWWWBBBBWBWBWWBBWWWWBWWWWWW", "BBWWWBBWBWBBWBBBWBBWBWWBBWBWBWWWWBBWWBWWBWWWWWBBBW", "WWWWWBBBBWBBBWWBBWBBBBBBBBWBBWBBBBBWWWWWBBWWWBBWBB", "WBWWWWBBBBBBWBBWWBBBBWWBWBWWBWBWBBBWWBBWWBWWBBWWBB", "WBBBWBBWBBBWWBBBWWBBWBWBWWBWBBBWWBWWWWWWBWWBBBBBWW", "WBBBBWWWBBBBBBBWBWBWBBWWWWWBWBWWWWWWBWBWBBWBBBWWBB", "WBWBBBWBBWBWWWBBBBWBBBWBWWWBBBWBWBBWBWBBBBWWWWWBWB", "BWBBBBBWWWBWBBBBBWBBWBWWWWWBWWBWBWWBWBWWWWBBBWBBBB"],111],
    [['BBBWW',
      'BBWWB'],4],
    [["BBBBBBBBBBBBBBB", "WWWWWWWWWWWWWWW", "WWWWWWWWWWWWWWW", "WWWWWBBBBBWWWWW"],4],
    [["WWBWWBBBWBWBWWWBW", "WWWBWBWBBBBWWWWWW", "WBBBWBWBBWBWBBBWW", "WBBBBBWBBBBWWWWBW", "WWBBBWWWWBBBWWWWB", "BWWWWBBBBWBWBBWWB", "BBWWWWWWBWWWBWBBW", "WWWWBWWBBBWWBBBBW", "BBBBWBBWWBWWBWWWW", "WWWBBWWWWWWWBBWWB", "BWWBBBWWWBBWBBBBB", "WBWBWWWBWWBBWWBBW", "BBBWWWBWBBWWBWBBB", "BWBBWWBBWWWWBBBWB", "BWWBWBBBWWBWBBBWW", "BBBWBWBWWBWBWWWWW", "WWBBWWBBWBWWBWBBB", "BWWBWWBWWBWBBWBWW", "WWBWWBWWBBWWBWBBW", "BWWBBBBWBBWBWWWBW", "BWBBWWBBBWWBWBWBW", "WBWBWBWBBWWWWBWBW", "WWBWWWWWBWWBWWBBB", "BWWBWBWWBWBWWWBWB", "BBWWBWBBWBWWBWWWW", "BWBBBWWWBBWBWBWWW", "BBWWBWBBWBBWBBWBW", "WWWBWBWBWBWBWBBWB", "BBWBBBBWWWBBBBWBW", "BBWWWWBWWBWBBWWBB", "WBWBBBWWWWBBBBWWW", "BWWBWBBBBBWWBWWBB", "BWWBWWWBWWBWWWBBW", "BWWBWBWBWWWBWBBBB", "BBBBBBWWWBBBWBWBW", "WWBBBWWWWBBBBWWBB", "WWWBWWBBBBWWBWBBW", "BWWBWWWBBWWBBWBWW", "BBBWBBBWBWBBWBBBW", "WBBWBWBBBWBBBBBWW", "WBWBBBWWWWBBBBWBB", "WWBWWBBWWBBBBBWBW", "WWWWWBWWWWWWBBWBB", "BBWWWWBWBWBWBWBWW", "BBBBBBWWWBBBBWWWW", "BWWWBWWBWBBBBWBBB", "BWBWBWBBBBBBWWBWW", "BWBBWBBBWBBWBBBBB", "BBBBWBBBBBBBWWWBW", "WBBBWWWBWWWWWWWBW"],197],
    [["WBBBBBWBWBWWBBWBWWB", "WBWBBWWWWBWBBWBBBWB", "BBWWBWBWBWWWBWWWBBB", "BWBWWBBWBWWBBWBBBWB", "BWBBWWBWWWWBWBBBWBW", "WBBWBWWBBBBWBBBBWBW", "WBWBWBWBBBBWBBBBWWW", "WWWBBWBBWBWBWBWWWWB", "BWBBWBWBBWBWBBWBBBW", "WBBBBWBWBBBWBBBBWBB", "BBBWWWBWWWWBBBBWBWW", "BWWWBWBBWBWWBWBWBBB", "BWWWBBWWWBWBWBWWWBW", "WBBBWWWWWWBWWWBWBBW", "BWBWBBWBBWBWBWWBWWB", "WWWWWBBWWWWBWBWBBBB", "BBWBWWWBWWBBBBWBWWW", "BBBBWBWBBBWBBBBBBWW", "WWBBWWWWBWBWWBBWWBB", "WBWBBWWBWWWWBBBWBWW", "BBBWBBBBBBBWBWWBWWB", "BWWBWWBBWBWBBBBBWWB", "BBWBWBWWBBWBWBBBBBW", "BBWBWWBBWBWBBBBWWWB", "BBWWWBBWBWBWWBBBBBW", "BWWBBWWWBBBWWWWWWWW", "BWWBBWBBBBWBWWBBWBW", "WBWWWBWBBWWBWBBBWBB", "WWWBWBWWBBBWBBWWBBW", "BBWBBWWWBBBBWBWBWWB", "WWWWWBWWBWBWBWBBBBB", "WBWWBWWWWBWBBBWBWBB", "WWBWWWWWBBWWBBBWWWW", "WBBBBWWWWBBBWBWBBBB", "WBWWWWWWWWWWBWBWBBW", "BWBWBWWBWBWWWBBWBBB", "BWBWWWWWWWBBWWWWWBB", "BWWWBWWWBBBBWWBWBBW", "WBBWBWWWWBWWBWBWWBW", "BBBWBBWWWBWBWWBBBWW", "WWWBBBBBWWWWWWBWBBB", "BWBWWWBWWWWBBWWWWWB", "BBWBBWWWBWBWWBWWBBB", "BBBWWBBWWBWWBBWBBBW", "BBBWWWBBBBWBBWBBBWB", "WWBBWWWWBBBBBBWBWBW", "WBBWBWWWWBWWBWWWWWW", "WBWWWWWWWWWBBBBBWWB", "WBWBBWBWBWBWBBBBWWW", "WBWBWWWWWBWWBWBBWWB"],248],
    [["WBWWBBBBBWWWBWBBBWWBWBWBBWWWWWWBWBWBBBWWWBBBBWBBWW", "WBBWWBWBBBBWBWWBBBBWWBWBWWWWBWWBWBBWWWBBBBWBWBWWWB", "WWWBBWBWBBWBBWWWBBBBWBWBBBWWBBBWBWWBBBBBBWBWBBWWBB", "BBWBWBWWBBBBBBWBBWWWBBBWWWWBWWWBWWBBWWWBWWBBWBBWBW", "WWBWWBWWBWBWBBWWWBBWBWBBWWWWWWBBWWWBBBBBWBWWBWBBBB", "BBWBBWWWWBWWWBBBBBBBWWWBWBWWWWWBWBWWBBWWBWWBBWBWBW", "WBWWWWWBBWBWBBBBBBBBWWBWBBWWBBWWBWBBBWWWBWWWBWWBWW", "WWWWBWWWWWWWWWBBBBWWWWBWBWWWWWBWBBBBWWBBBWBWBWWBWW", "WBBBBWWWWWBBBWBWBWWWBWWWBBBWBBWBBBWBWBBWWWWWWBWWBB", "BBBBWWBWWBBBWWWBBBWBWBWWBWWBBBBWWWWBBWWWWBWWWBBWWB", "BWWWBWBBBWWWWBBBWWBBBBBWBBWBWBBBWBWBWWWWBWWWWWWWWB", "WWBBWWBWBBBWWWWWBBBWWWBBWBBWWWWWWBWWBWBWWBWBBWWWWB", "BWWBWWWWBBWBBBBBWBBWBBWBBBBBBBBWBBWBWWWBBWBBWBWBWB", "WWWBBWWWBBWWWWBBBBWWBWBWWBBWBWWWWBWBWWWWWBWBWBBWBB", "WWWBWWBBBBBWBWWWWBWWWWBBBWBBWWBBBBWBWBBWBBWWBWWWWW", "WBBWBBWBBWWWWWWWBWBBWWBBWWBWWBWBBBWWBBBBBWBBBBBBBB", "BWBWBBBBBWWWWBWBBWWWBBWWBWBBWBWWWBWWBWWWWWWBBBBBWW", "BWWWBWWWWBWWBWWBBBWBWBBWBWWBWBBBWWBBWBBWWWWWBBBBWB", "BBWBWBWWBBBWBBBWBBBBBWBBBWWBWBWWWBWBWBWWWBBBBBWBWB", "BWWBWBWBBWBWBBWWBBBWWWWWWBBBWBBWWBBBBBBWBBWBWWBBWB", "WBWBBBWWWWWBBWWWWWBWBWWBWWBBBBBBWWWWBWBWBWBWWBWWBB", "WBWBWBBWWBBBBBWBWWBBBWWWWWBWBWWWBWWBWWBWWWBWBBBBBW", "WWBWBBWBBBBBBWBBWBWWBBBWBBWBWWWWBBBBWBBBWBBWBBWWWB", "WWWBBWBWBWWWWBBBWBBBBWWWBWWWBBWBWBWBBBWBWBWWBWBBBW", "BWBBBWBWWBBWWBWBBBWWBWBWBBBBBWWBWBBWBBBBBWWBBWWWBW", "WWWBWWWBWBBWWBBWWBWBBBWBBWBBBBBWWWWWWWBWBWWWWWWWWB", "WWBWBBBWWWWBWWBWBBBBBWBWWBWBBBBWWWBWWWBWWBWWBWBWBW", "BWWWWWBWWWBWWBBBBBWWBWBBBWWWWWWWWBWBWBBWBBBWWBBBBW", "BBWBWWBBWWBWBBBWWWBWWBWBBWBBWWWBBBWWBBBBWBBWBBBWBW", "BWBBBBBWBBWWWWWBBBWBWWWBWWBBWWWBWWWBBBWWWBBBBWWBBW", "BWWBWBBWWWWWBBBBWWWWBBWWBBBWWBBBBWBWWBWWBBWWBWBWBB", "BWBBBWBBWBBBBBWBBWBBWBBWWWWWBBWBBWBBWWBBBWWWWBBBWW", "BWWWBWWBWBWBBWBWWWBBBBWBBWBWBBBBBBWWWBBWWBBWWBBWWB", "BBWBBWWBBBBBBBBBWBBWWBBBBWWBBWBBBBBWWWBWBBWWBBWBBW", "WBBWWWWWBWBBBBBWBWWBBBBWWBWWBWBWWWWWWWWWWBWBWBBBWB", "BWWWBWWWWWWBBWBWBBWBBBWBWWWWWBBBBWWWWWBWWBBWBBBWWW", "WWWBBBWWWBBBBBWBBWWWBBWWWBWWWBWBWBBBWWWBBWWWBBWWWB", "BWBWBWWWWBWWBBBWWBBWBBWBWBWBWBWBWWBBBBBBBWBBBBWWWB", "BWWBWBWBBWBBWBBBBBWBBBWWBWBWBWWBBWBWBBWWWWBBWWBWBW", "BBWBWBWWWWWBBWBBBBWWWWWBBBBWBBWWWBBBBWWBBBBBBBWWBW", "BWBWBBBBBBWBBBBWWWBWWBWBBBWWWBWBWWWWBWBBWWBBBBWWBW", "BWWBWBWBBWWWWBBBWWBWWWBBWWWBBBBBWBWBWBWBWBBWWWBBBB", "WBWWBWBBWBBBWBWBWBWWWWBBWWWBBWBWBWWWBWBBWBBBWWWWWB", "WBBWWBWWBBBBBWWWWBBWWBWWWWWBBWBWWBWWWBWBWWWBWWBBWW", "BBBWBBWWWBWWWWWWWBBBWBBWBBBWWBBBWBWWBWBWBWWWWWWBWB", "WBBBWBBBWBWWBWWBBWWWWWBWBWWBWWBBWWBWWBWWBWWWWBWWWB", "BBWWBBBWWBWWWBWWBWWBBWWBWWWBBWWWBBBWWBBWBBWBBBBWWB", "WWWBBBBBBBBWWBWBWWWBWBBWBBBBWWBBWBBBWWBWBWBWWWBBWW", "WWBWBBBBWWWWBBWBBBBWWBWBWWBWBWWBWBBBBBBBBWBWBWBWWW", "BBWBWWBBWBBWBWBBWBWWBBWWBBWBBWBWBBBWWWWBBWWBWBWBBW"],158],
    [["BBWWWBWWBWBWWWWWBWBBBBWBBWBBWWWWBWBBWWBBWBBWWBBWWW", "BBWBBBBWBWWBBBBWWBBBWWBWBWBBWWBWBBWWWBWBWBBWBWWWWW", "BWBBWWWWBBWBWBWBBWWBWWWBWBBWWWWWWWWBWBBBBWBBWBBBWW", "WBWBWWBBWWBWBWBBWWBBWWWWBBWBWBBWBWBWWWWWWBWBWBWWWW", "WBBWWWWBWBBWWWBWBBWBWBBWWWBBBBWWBWWBBBWWBBWBWWWWWB", "WWBBBWWWBWWWWWBWWWWWBBBWWBWBWWBWWBBWWBWWWBWWWWBWWB", "BBBWBBBBWWBWBWBBWBBWWWBBBBBWWBWBWWWWBWWBBBWBBWWBWB", "BWWWBWWBWBWWWBBBWWBWBBWBBWWWWWWBWBBBBWWWWWWBBWWBWB", "BBBBBWWBWWWWBBBBWWBBWBWWBWBWBWWBWWBBBBWWBBBBBBWBWW", "BBWWBBWWWWWBBWBBWBWBBWBBBWBWBWBWWWBBWBWWWBWWBBWBBB", "WWBBBWWBWBBWWBWBBBWWBWWBBBWWWBBWWBWBWWWWBWWBBWWBWW", "BBBWBWBBBWBBBBWBBWWWBBWBWWBWBBBWWWBBBBWWBWWWWWBBBW", "WBWBWWBWWBWWBBBBBBBWBBBWBWWBWWBWBBWBBWBBBBWBBBBWWB", "BBBBBBWWWBWBBWWWBWBBWBBBBBWBWWBWWWWWWWWWBWBWBBWBBW", "WWBBBBWBBWBWBWBWBBBBBBWWBBWBBBWWWBWWBWBBWBBWWBBBWB", "BWWWBWBWWBBWBBWBWBWBWWWWWBBBBWWBWWBWWWWBWWWBBWWWWB", "WBBBBWBWWWBBWBBWWWWBBBWBWBWWWBWBWWWBWWBWWWWWBBWWWW", "WWWBBBBBWWWWWWWBBWWWWWWWBWWBWWWBWBWBBWBWWBWWBWWBWW", "BWBWWWBBWWWBWWWWWBBBBWBBBBBBWBWWBWWWBWBBBWBWWWWBBW", "BWWBBWWBWBBBBBBBWBWBBWWBBBBWBBBBWWBWWWWBBBWWBWBWBB", "WBBBWBWWBBBWBWBBBWBWBBWBWWWWBBBWWWBWWWWWBBBBBWWBWB", "BBBBBBBWWWWBWWBBBWBBBWWBBBWBWWWBBWWBBWWWWBWBBBWBBB", "BWWBBWBWBWBBBWBBBWWWBWWWBBWWBBBBBBWWBBWWBWBBWBBWBB", "BBWBWBBBBBWWBBBBWWWBBBWWWWBBWWWWBBWBWWBWBBBWBWWWBW", "WWBWBBWBWWWBWWBBBBBWBWBWWBBWWWBWBWWBBWWWWWWWBWBWWB", "WWBBBBBBWBWWWWWBBBBBWBBWBWBWBBBBWBWBBWBBBWBWWBBBWB", "BWWBBBBBWBWBWWBBWBBWWWBWBBBBWBBWBBBBBWBBBBBBBWBBWB", "BWWBWBBWBWWWWBWBBWWBWWWWBBWBWBBBBWWWWBWWWWWWBWWBWB", "BBWWWBBBBBBBWWWWWWBWBWBWWWWWBBWBWWWWWWWWWBBBBWWWBW", "WWBWWBBWWBBBBBWWWWWBWBBBBWBWBBBWWWWBBBBBBBBBBWBWBW", "WWBBBBWBBWWWBWWWBBBBBWWBBWWBBBWBWBWBBWBBBBWWWBBWWB", "WBWWBBBWWBBBBBWBBWWWBWBBBWWWBWWBBBBWBBWBBWWWBBWWBW", "BBWWBBBWBWWWBBBWBBWWWBBWWWWWWWWBWBWWBWWBWBWWBWWBBW", "BBBWWWBWBWWWBWBWBBBWWWBWWBBWBWWBBWWWBBBBWWBBBBWBWW", "WBBWBWWWBWBWWBWBBBBBWWWBBBWWWBBBBBBBWWWBBWWWBWBBWW", "WBWBWBWWBWBBWWWWBBBWBBBWWBBWBWWWBBWBWBBBBWBBWBBWBW", "BWBWBBBBBBWWWWBBWWWBWWWWBBWBWBBWBWBBBBWBBWWBBBWBBW", "BWWWWWBWWBBWBWWWBWWBBWBWBWWWWWWBBWWBBWWBWWWBWWBBBW", "WBWWBBBBWWWBWWWWWWWWBWWWWBWBWBBWWBWBWWBWWBWWWWWWBB", "BWWBBBWWWBWWBWWBBWBWWWBWBWWBWBWBWBWBWWBWBWBWBWWWWB", "WWWBBBBBWWBBBBBWBBWBWBBWBWWBBBWWWBWWBBBWBWWWBWBBWB", "WWWBBWWBWWWBBBBWBBBWBWBBBWWWBWBWWWWWBBWWWWWWWBWBWB", "BBWBWWWWWWBWBBWWWBBWBWWWBBWBWWBBBWBBBWWWWWBBBBWWBB", "BWWWWBWWWWBBWBWWWBWBWWBBWWBWBWWWBBWBWWWBWBWWBBWBBB", "WWWWWWWWBBBWBWBBWWBBBWBWBBBWWBBWWWBWBBWWWBWWBWBWWB", "WWBBBWWWBBBBWBWBBWWWBBBBWBWBBWWWWWBBBWBBWBWBBBWBBB", "BBWBWBWBWWBWWBWBBWBBWBWWBWWWWWWWBBWWWBBWWBWBBBBBWW", "BWWBWBBWBBWWBWBWWWWBBBBWWWWBWWWWBBBBBWWBWWWWWBWWWW", "BBBWWWBWWBBBWWBBWWWBBBWBBWWWBWWBWBWWBBBBWBBWWWWWBB", "WWWBWBBBWWBBBBWWBBWBBWBBWWBWWWWBWWBBWWBBWBWWWWWWWW"],288],
    [["BWWBWBBBBWBWBBBWBBWBBWBWBWBWWWWWWWWBWBBBWBWBBWWWWB", "BBBWWBWWBBBWBBWWWWBWWBBBWWWWBBWWWWBWBBBBBBWBWBWBWW", "WBBWWBWWBWWWBBBBBBWWBBBWWBBBWWBBWWWWWWBWWBWWBBBWWB", "WBWWWWWWWBBBBBBBBWWWBWBWBWBWWBBBBBWWBBBWWBBWBWWBBB", "WBBBBBWBWWBBBWWWBWWBBBBBBWBWBBBBBBWWBBWWBBBBWWWWWW", "WBWBBBBWWWWBBWBWWBWWBBWBBBWWBWWBBWWWWBBBWBWWWBBBBW", "BBWBWWBBBBWBBBBWBWWBBWBBBWWBBWBBWWBWBWBBWBBWWBBWBW", "WBBWWBWWBWWWWBWBWBWWBBWWWBWBWWBBBBWWBBBWWBWWBBBBBB", "WBBBWWWWWBBBWWBBBWWBBBBBBBBBWWWBBBWBBWWWBWBWBBBWBB", "BBBBWWBWWBBBWBWWBBBBWBBBWBWWBBWBBBWWWWBBBWWWBBBBWW", "WWBWWWWBBWBBWBBWWWWBBWWBBWWBBWBWBWBWBBBBBWWBWBWWBB", "WBBWWBWBBBBWBWBWBBWBWWWBBBBWBBWBBBBBBBBBBBBBWWWBBB", "BBWWWWWWWWBWWWWBBWWBBWBWBWBWBBBBBWBBBWBBBBBWBWWBWB", "WWBWBBWWWBBBBWWBWBWBBWBBWWBWWBBWBWWWBBBBBWBBWBWBWB", "BWWWWBWBBWWBBWWWBBWBWBWWBWWWBBBBBBWWBWWBBBBWBWWBBB", "WBBWWWWBBWBWWWBBWWWWBWBBBWBBWWBBBBBBWWWBWWBWBBWBWB", "BWWBWBBBBBBBWBBWWBBWWBWWBWBWBWWWWBWWBBBBWWBBWWWWWW", "WBWWWWBBWWBWWBWBWWBBWWBBWWBBWWWBWBBWWWBBBWBBWWBWWW", "WWWWBWBBWBBWBBBWBWBBBBWWBWBBBBBBBBWBWWBWBWBWBWWWWW", "BWBBWWBWBBBBBWWWBBWWWBBWBWBWBBWBWWBWWBWBWWWWWBBBBB", "WBBWWBBWBBBBWWBBBBWWWWBBWBWWWBWBWBBBWWBWBBBWBBBWBB", "BWWBWBBBWWBBWWBWWWBBWBWBBBBBWWWBWWWWBBBWBWWBBBWWBB", "WBBWWBBWBWBWWWWWBWWBWWWBBBWWBBWWWBBWBBWWWWWWWWBBWB", "BBWWWWWWBBWWBWWBBWBWBBBBWWBWBBWBWBBBBWBWBWBBWWWWBW", "BBWWBWBWWBBBWBWBWBBBBBBBWWWWWBBWBBBWWWBBWWWBWWWWBB", "WWWWWWBWBWWWWWWBWBBBWBWBWBWWWWBWBBBBBWBWWBWWBWBWWW", "BWBWBBWWBBWBWWBBBBWBBBBBBWBWBWBBWBBBBBBBBWBWBWWWBW", "BBBWBBWBBWBWWWBBWWWBWWBWBBBBBWBBBWWWWWWWBWBBWWBBWW", "WBWWBWBBBWWWWWBBWWBBBWBBWBBBWBBWBWBWBWWWBBBWBWBWBW", "WBWBBBBWBBWWWWBBWWBWBBWBWBWBBWWWWWBBWBBBWBWWWWWWWB", "WBWBBBWBWBWBWBWBWWWBWBBWBWWWBWBWBBBBBBWWBBWBWBWWBW", "BBBWBWBBBWBBWBWBWWWBBBBWBBBWBWBWBWWBWWBBWWWBWBWWWB", "BBBBBWWWWWBWBWBBBBBWBWWBWBWWBBWBWBBBWBWBWBBWWBBBBB", "BWBBBBWWBBWBWWWBWBBBBWWWBBWWWWBWWBWWWBBBBWWBBWWBBW", "WBWWWBWWWWBBWBBWWBWBBWWWWWBBWBBWWBWWBBWWBBWWBWWBBB", "BWBWWWWBBBBWBBWBWBBBWWWBWBWWWBWBWWWBBWBWWBBBWWBBBB", "BBWBWBBWWBBWBWBWWWWBWBWWBWBBWWBBWWWWBBBBBBBWWBBBBW", "WBWBBWWWBWBBBWBBWWWWBWBWBWBWWBWWBWBWBWWBBWBBBWBBWW", "BWBBBBBWBWWWBBBBWWBBWWBWWWBBBBBBBWBWWBBBBWBWBBWWBB", "WWBWWBWWBBBBWBWBBBBBBWWBBWBWBWWBBWWBBWBBBBBWWWBBBW", "BWBWBWWBWWBWBBBWBWWWBWBWBWBBWWWBBWWWWWWWBBWBWBBWWW", "BWBBWBBWBWWWBBWWWBBWBBBBBBBBBBWWWWBBBBWBBWBWBBWBWB", "BBWWWWBBBBWWBBBWBWBBWBBWBBBBWBWWBWWBBWWWWBBWWBBBBW", "BBWWBBWBWBBBBWBBWBBWWWBBWBWBBBBWBBWWWWWWWWBWBBWBBW", "WBBBWWWWWBBWBWWWWBBWWWBBBWBBBBWWBBBBBWWBWBWBWBBBWB", "WBBBWWWBWBBWWWWWWBBBWBWBWWBBBBBBWBWWWWWWWWWWBWWWWB", "WBBBBWWBWBWBBBWBWBWWBWBWWWBBBBWWWWBWBBWWBWBBBWWWWB", "WWBBBWWWWBBBWBBBBWWBBBWBWBWBBBWWBWWBWBBWWBWWBBWBWW", "BWWBBBWBWWWWWWWBBBBBWBWBWBBBBBBWWWWWWBWBBBWWBWWBBB", "BWBBBBBWBWBBBBBBWWWWBWBBWBWBWBWWWWBWBWWWBWBBBBBWBW"],123],
    [["WW", "BW", "WB", "WB", "BB", "WW", "BW", "BB", "BB", "BW", "BB", "WW", "BB", "WB", "WB", "BW", "BB", "BW", "BW", "WW", "BB", "WB", "WB", "BB", "BW", "WW", "BB", "BB", "WW", "BW", "WW", "WW", "BB", "BB", "WW", "WB", "WB", "WW", "BB", "WB", "BB", "BW", "WW", "WB", "WB", "WW", "BW", "BB", "BW", "WB"],224],
    [["WWBWWB", "WBBWWB", "BBBBWW", "WWBBWB", "WWWBBW", "BWBBBB", "BBWWBB", "BWWBBW", "BBBWBB", "WBWBWW", "BWWWBB", "BBBBBB", "WBBWWW", "WBBWWW", "BBWBWW", "WWWWBW", "BWWBBB", "BBWBBW", "BBWBBW", "BWWBWB", "WBWWBW", "BBWWWB", "BWWBWW", "BBBWWW", "BBWBBW", "WWBBWB", "BBWBWB", "BWWBWW", "BBWBWB", "BWBBWB", "BWBBBW", "WWBBWB", "WBBBBW", "WWWWBW", "WBWBBB", "BWBWWB", "BWWBWB", "BBBBWB", "WBWBBB", "BBBWWB", "WBWBBW", "BBWWBW", "WBWWWW", "BWBWWB", "BWBBBW", "BBWBWW", "WWWBBB", "BBWWBB", "BWWWWW", "WBWBWB"],173],
    [["WWWWWBBWWBWWWBBBBWBBB", "BBBBBWBBWWWWWBWWBBBBW", "WWBWWWBBWWBWWBBWBWWBB", "BWWWBBWBWWBWWWWBBWWWW", "BBWBWWWWWWWBWBBWWWBBW", "BWBBWWWWWWWWWWWBBWWBB", "WWWWBBWWBWBBBWWWBWBWB", "WWWWWBWWBBBWBWBBBWWBW", "WBWWBWBBBBBBWBWBBWWWB", "BBBWWBBWWWBWWBWBWBBWB", "BBBWWWBBWWWWBWWWBBWBW", "BBWBWWWWWBWWWWWWBWWBB", "BBWWWWWBWWBWBBWBBBBBB", "BWBBBWWWBBBWBBWBBWWBW", "WWWWBWWBWWWWWBBWBBWBW", "BBBBBWWWWWBBBBWWBBBBW", "BBBBBWBWWBBBWWWWBWBWW", "BBWBWBWBBWWWWBWBBWWWW", "BWWWBWBBWWWBBBBWBBWBB", "BWWBBBWBWBBWBWBWWBWWW", "BWWWWWWWWWWWBBBBBWWBW", "WBWWWBWWBWBBBBWBBWBWB", "BBWBBWWWWWBWWBBWWWBBB", "WBWBWBBBBBBWBWBBBWBWW", "BBWBBBBBWBWWBWBWBBWBW", "BWWWWBWWWBBBWWBBBBBBW", "BBWWWWBWBWWWWBWBBBWBW", "BBWBWBBWBBWWWWBBBWBBB", "BWBWWBBWWWWWWWWWBWBWW", "BWBBBBBWBBWBBBBWWBWBW", "BWWBWBBBWWWBBWWBWWBBW", "WBBBWBBWWWWWWWBBBWWBB", "WWWWBWWBWBWBBWWWBWWWB", "BWWWWBWBBWWWBBBBWBWBB", "WBBWBBWWWBWWWWBWBBBWW", "WWBWWBBWWBBBWWBBBWWBB", "WWWWWWWBBBBWWWBBWWBWW", "BWWWBWBWBBWWWWWBBWBBB", "WBBWWWWWBWWWWBWWWBWBB", "BWWWBWBWWWWBBBWBWBWWW", "BWBBBWWWWBBBWBWWWWWWB", "WWBBBBWWWBBWBBBWWWBBW", "BWWWBWBWBWWWWWBWWWWWB", "WBBWWWBWWBBBBBBWBWBWB", "BWWWWWBBBBWWWBBWWBWWB", "WWBBBWWWWBWWWBWBWWWBB", "WBBWBBBWWWWWBWWBBWWBB", "BBWWBWWBWBWBWBBBWBWBB", "WBBBBWWWBBBBBBBBBWWWB", "WBBBBWWBWBBWBBWBBBBWW"],154],
    [["BBWBWWBBWBWWWBBBWWWWWBB", "BWWBWBBBBBWWBWWWWBBBWBW", "BBBBBWBWWWWBWBWWBBBWWWB", "BWBWWBBWWWWBBWWWBWWBWWB", "WWBBBBWBWWWWWWWBWBWWBWW", "WWWBWBBWBWWBBWWBWWBWBWW", "BWBWBBBBBBBBBWWBWBWBBWW", "WBBBWBBBBWBWBBWBWBBBWWB", "WBWWWWWWBWBBBBBBWWWBBBB", "BWBBWBBWWWWWWBBBBBBWBWW", "WBBBWWBWBBBWWBWWWBWBBBB", "BBWBBBBWWBBBBWWWBWBBWBW", "WWWBWBBWBBBBWWBBWWWWWBW", "BBWWWWBBWWWBWWWWBWBBWWW", "BWWBBWWBBBWWBWBWBBWBWBB", "WWWWBBBBWWBBBWBBWWBWWWB", "WWBWWWBWWBWBBBBWBWWWBBW", "BWWBBBBBBWWBWWWWBBWBWBW", "BBWBWWBBWWWBBBWWBBWBBBB", "BBBWBWWBBWBBBBWBWWBBWBW", "BBWWWBWBWWBWWWBWBWBBWWW", "WBBBWBBWWWWWBWBBWWBWWBW", "BBWBBBBWBBBBBBWBBBBBWWW", "BWBWWBWBBBBBWBWWBBWWBBW", "WWBBWWBBBWWWWBWBWBWBWBW", "WWWBWWBBWBWBWBWWWWBWBBB", "WBWWBWWBBBWBBBWBWBBWWWW", "BWWBBBBWWBWBBBWBBWWBBBW", "WBBBWWWBBBBBWWWWWWWBWBW", "BWBWWWWWWWBWWWWWWBWWWBW", "WBBBWBWWWWWWBBWBBWWBBWB", "BBBBWWBWBWWBBWWWBBBWWWB", "WBWWBWWBWBBWWWBBBWWWWBW", "BBBBBWWBBBBBWWWWBWWBBBB", "BWWBBWBWWWBWBBBWBWWBBBB", "WWWBWBWWBWBBBBWWWWBWWWW", "BBBBBBWBWBWBBWBBBBWBBBW", "BWBBBBWBBBBWWWWWWWWBBWW", "BBWWWBBBWWWWWBWBBBBWBBB", "BWWBBWBBWWWBBBWBBBBWBWB", "BWWBBBWWWBBBWWBBBWBWBWW", "WBWBBWBBBBBBBBBWWBWWWBB", "WBBWWBBWWWBWBBBWBWBWWWW", "WBWBWBWBBWWBWBWWWWWBBWB", "WBBWWBBBWWBBBWWWWWBBBWB", "WBWWBBWWWBBWWBWWWWBBBWB", "WBBBBWWBWBWBWBWBWWWBWWB", "BBWBBBWWWWWWWBBBWWBWBWB", "WBWWWBWBBWWBWBWWBBWWBWB", "BBBBWWBWWBWWWWWWWWWBBWB"],185],
    [["WBBWBBWWWB", "BWBWWWWBWB", "WBBWWWBWWB", "WBWBBBBBWW", "BBBWWWBWWB", "WBWBBBWBBB", "BWBBWWBWBW", "WWBBBWWBWB", "WBWBWWBBBB", "BBWWBBWBWW", "WBBWBBWBBB", "BBBBBBWBWW", "BBBWBWWWWW", "BWWWWWWBBB", "BBBWBWWWWW", "BWBWWBBBBB", "BWBBBWWWBW", "WWWBBBWBWB", "BWWWWWWWWW", "WWWBBBWWWW", "BWWWBBBBBB", "BWBBWBBBWB", "WBWWBBBBWB", "WWWBWBBBBW", "WBBWBBBWBW", "WBBBWWBWWB", "WWBWBWBBWW", "WBWWBWBBBB", "WWBWWWWWBB", "BBBBBWBWBW", "WWBWWBWBBW", "BWBWWBBBWW", "BWWWBWWBWB", "BBBWWBWWWW", "WBWWWBWBBB", "BWWWWWWWWB", "WWBBBBWBWW", "WBWBWWWBWW", "BWBBBBBBWW", "WWWWWWBWWW", "BWWBBWBBWB", "BWWWBWWWBB", "WBWWBWBBWW", "WWWBBBBBWB", "WBWWBBWBBW", "WWBWWWBBBW", "BBWWWBWBWW", "WWBBWBBBBW", "WWBWBBWBWB", "WBBWBWWWWW"],206],
    [["B", "W", "B", "B", "W", "B", "W", "B", "W", "W", "B", "B", "W", "B", "W", "W", "W", "W", "B", "W", "W", "W", "W", "B", "B", "B", "B", "W", "W", "B", "W", "W", "W", "W", "W", "B", "B", "B", "B", "B", "W", "B", "W", "B", "W", "B", "W", "W", "W", "B"],177],
    [["WBWWBWBWWWWWWWBBWWBWB", "WBWBBBBWWWBBBWWBWWBBB", "BBBWBWBWBWBWWBWBBBWWB", "BWBWBBWBBWBBBBWWBBWWW", "BWWWBWWBBBWBWBWWWBBWW", "BBWWWWWBBWWWBWBBWBWBW", "BWWBBWBBBBWWBWBBWWBBW", "BWWBBWWWWBWWBWBBBWWBB", "WBBWBWWBWWBBWWBWBBWWW", "WBBWBBWWBBBWBWBBWBBBB", "BBWBBBBWWBBWWWBBBBWBW", "WWBBBBWBBBWBBBBBBWWBW", "WBBBBWBWWBBBWBBWWBWWW", "WBWBWWWBBWWWBWBWBWBBW", "WWBBWBBBBBWBWWWBWBWBW", "BWWBWBWBWWBWWWBBBBWWW", "WBWWWWWWWBWWBBBWWBBWB", "BWBWBWWBBWBBBWBBWBWWW", "BWWBBBBBWWWWBWWBWBWWB", "BWWBWWWBBBBWWWBBWBWBB", "WWWBWWBBWBWWBBBWBBWBW", "WWWWBBBWWBBBBBBWBWWBB", "WBWBBBBBBBBWBWBBBBBBB", "WWBWWBBBWBBBBBBWWBBWB", "BWWWWBWBWWWWBBBBWBBBB", "BBBWBBWBBWWBBWBWWWBWW", "WBWWWWBWBWBBWBWBBWWWB", "BBWBWBBWBBBWBBWWBWWWB", "BWBBBBWBWBWWBBWBWBWBW", "BWWBWWBWBBBWBBBBWBWBB", "BWBWWWBWBWBWBWWWBWWWW", "BBWWWWBWWWWBBWWBWBWWW", "BWBWWWBBBWWWWWWWWWWWW", "BBWWBBWWBBWBBBBWWWWBB", "WBWBBWBWBBBBBWBWBBBBB", "WWBWWWWWWWBBBBWWBBBBW", "BBWBWWWBWBWWBWBWWWBWW", "BWWBBBBBBBWBBWBBWWBBW", "WBBWWWBBBBBWBBBWBWWWB", "WBWBBWWBWBBBBBWWBWWBW", "BWBBBWWWWBBWBBBBBWBWB", "WBBBBWWWWBWBBBWBBBBBW", "WBBWWBBBWWBWBBWWWBWWB", "BWBWBWWWWWWWWWWBBWBBB", "WWWBBBBBBWWWBWWWWBWBB", "WBWWBBWBBWBWBBBWWBWWB", "BWBWBWBWWWBBBWBWWWWBW", "BWWWWBWBWWBBWBWWWBBWB", "WWBBWBBWWBBBWWBBWBWBB", "BBBWWWBBWBWBWWBWWBBBW"],182],
    [["BBWBBBBBBWWB", "BWBWWWWWWWWB", "BBBBBWWBWWWW", "WWWWWBWWWWBB", "BBWWWWBWBBWB", "WWBBBBWBBWBW", "BBBBBWWBWBWW", "WWWBWWWWWWWB", "WBWWWBBWBBWB", "WBBBWWWWWBWW", "BWWBWWWBBBWW", "BBWBWWBWBWBW", "BWWWWBWWBWBB", "BBWBWBWWBWBW", "BWWWBBBWBWBB", "BWBBBBBBWWBW", "BBWBBBWBWBWB", "WBWBWWBBWBBB", "BBWWWWBWWBBB", "BWBBWBBWBWWW", "BBWWWWBBBBBB", "BBWBBWWBWWBB", "BWWBWWBWBWWW", "BBWWWBWWBWWW", "WBBBBWBWWBWW", "BWWWWBBWBWBB", "BBBWWBBWBBBW", "BBBBBWBWWWBB", "BWWBWBWWWBWW", "BWBWBWWBBWBW", "WWBBBBWWBBBW", "BWWBWBBBBWBB", "WWWWWWWBWWWB", "BWBBBBBBWWBB", "BWWBWBBBBBBB", "WWWWWBWWWBBB", "BWBBBBWBWWWW", "WBWBBWBBBBBW", "BWBWBWBWBWWB", "BBBBBWBWBBWW", "WBBBBBBWBBWB", "BWBBWBBBBWBB", "BBBBWBBBWWBB", "WBBBWBBBWBWB", "WWBWBBWWBBWB", "BBBBWBWWWWWW", "WBWBWBWWBBBW", "WWBWBWBWBWBW", "BWWBBBWBBBBW", "BBBWWWWWWWWB"],152],
    [["WWWWWBBBBBWWWWW",
        "BBBBBBBBBBBBBBB",
    "WWWWWWWWWWWWWWW",
    "WWWWWWWWWWWWWWW"],4],
    [["BBWWWWWWWBBBBWWWBWWWWWWWWWBWWWBWBWBBBWBWBWWWBBWWWW", "WWBWBBBBWBWBBBBBWBWWWBWWBWBBBWWBBBWBBBWBBWBWWBBBBB", "BBWWBBBBWBWBBWWWBBWWWBWBWWBWBBWWBBWWBWWWWBBBBWBBBW", "WBBWWBBWBBBBWWBWBBWBBBBBBBWBBBBWWWWWWBBWWBWWWBBBBB", "WBBBBBWBWWBWWBBWBWBWWWBBBBWBBBBWBBBWBWBBWBBBWBBBBB", "WBBWWBWWBBWWWWBBBBBWWBBBBWBWBWBWWWWBWWBWBBBWWWBWWB", "WBWWBWBWBBBBWWWBWBBBWBBBWWWWBWWBBWBWWBWWWWWBBWWBWW", "WWBWBWBWBBBBWBBBBBBWWWBBBWWWWBWWBWWWBBBWBBBWBWWBBW", "WWBBBBBWBWBWWWBBWWWWBBWWWBBWWBBBBWBWWBWBBBBWWBWBWB", "BWWWWWWBBWBBWBWWWBWBBBWBBBBWBWBWBWWWWWBBWWWBWWWBWB", "WWWWBWBWBWBBWWBBWWBWBWWWBWWWBWBWWBBBWWWBWWBBWWWBBW", "BBWBWBBWBBBWBBWWWWWBBBBWBWBBBBBWBBWWWWBBBBWWWWBBWB", "BWBBBBBBWWBBBBBBBWBBBWWWBBBBWBWBBBBBBWBWBBBBWWBWWW", "BWBWBBBBWBWWWBWWBBWWBBWBWBWBWBBWWWWBWWWBWBBWBBWWWB", "BBWBBWWBBWBBWWBBWWBWWWBWBBWWWWWBWWBWBBWBBWWWWBBWBB", "BBBWBWBWBWWWWWBWBBWBWWWBWBWBBBWWBBWBBBBWWWBWWBWWBB", "BWWBWBWWWBBBBWWBBWBWWBBBBWWWBWWWWBWBWWWBBWBBWBBBBW", "WWWBWWWWBBWWBBBBBWBBBWWBBWWWWBWWBWWWWBBWBWWBBBBWWW", "BBWBBWWWBBWBBBBBWBWWWBWBBBBWBWBBWBBWWWBWWBWBBWBBBB", "WWWBWWWWWBBBBBWWBWWWBBWWWWWBBBWBBBWWWWWBBWWBBBBWBB", "WBBWWWBBBBBBBWWWBWBWBBWBBWBBBBBBBBBBWWWWBBBWBWWWBW", "WBBWBBWBWWBBWWWWBBBWWWBWBBBWWBWBWWWBWWBBWBWWWBBBWB", "BWWBWWWWBBWBBBWWBWWBBBBWBBBWWWBBBWBWBBWWWBBBWWWBWW", "WWWWWWWBWWBWBWBBBWBBBWWWBWWBWWWWBBBWWBBBWBWWWBWWBB", "WWWWBBWWWBWBWWBWWWWBBBBWWWWWBWBWBBBBWBBBBBWBWBWBWW", "WWBBWWBWWWWBWBBBWBWBWWWBBWBBWWWBWBBBWBBWWBBWWBBWWW", "BBBBWBWBWWWWWWBBBWBBWBWBWBWWBWWBWWBBWWBBBBBBBBBBBB", "BWWBWWBBBBBWWWWBBWBBBWBWWWBWBBWBBBWWBWWBBBWBBBBWBW", "WWWBWWBBWBWWWWBWBBBBBBWBBWWWWWBBBBWBBBBBWWBWWWBWWB", "BBWWWWBWBWWWWBWWWBWWWBBBWWBBBWBBWWBWWBWBBWWBWBBBWW", "BWWWBBWWWBBWWBBBBBWBWWBWWBWWWBWWWBBWBWBBWBBWWBBWWW", "WBWBWBWWBWBBWWBBBWBWBWWWWWBWWWBBWWWWWBWBWWBBWWWBWB", "BWWBWWWWWWBBBBWWWBWBBWBWBBBWWWBBBBWWBBWBBWWBWBBBWB", "WBBBBBWWWBBBBBBWWWWBWWBWWBBWBWBBWWWWBBWBWBWBWBBBWB", "BBWBWWBBWWBBWWBWWWWWWWWBBWWBBWBBWBBBBWBBWWWBWWWBWB", "BBWBWBWWBWBBWWBBWWBBWWBBBWBBWBWBBWBWBBBWBWBBWBWWWB", "WWBWWWWWBWWBWWBBWWBBBWWBBBBBWBBBBBBBBBWWWBBBBBBWBB", "BBBBWBWBWBWBWWBWBBBBWBWWWBWWWWBWWBWBBBBWWWWWBWWBBB", "WWWWWWBWWBBWWWBWWBWWWBBWBWWBWBWWWBWWWWBWBWBBBWWWWB", "BWWBWBWWBBBBWBBBWBWWBWWWBWBWWBBWWBBBWWWBWBWBWBBWWB", "WWBBWWWBBBBWBBBWWWBBWBWBWWBWWBWWWWBBWWWBWWWBBWBBWW", "WBWWBWWBWBBBBBBBWBWBWBBBBWBBBWWBWBWWWWWBWWBWBWBWWW", "BWBBWBWBWBWBWBBWBBBWWWBWBBBWWWWWBWBBWWBBBBBBWWWBWB", "WWWBWBBBBBBWBBBBWWBBWWWBWWWWBBBBWBWBBBWWBBBWBWWWWW", "BBBBBBBWBWBWBBBBWBBBWBWBBWWWWBBBWWWWWWWWWWBBWBBBWW", "BBBBBWWWWBWWBBWWBBWBBBBWBWWBBWWBBBBBBBBBWWWWWBBWBW", "WBWWBWBBWBWWWWBBBWBWWWBWBWBWBWWWWWWBBBBBBBBWWWWWWB", "WWBWBWWWWBWBBWBWWWWBWBWBWWBWWWBBBBBWWBBWBBBBWBBBBB", "BBWWBWBBWWBWWBWWBWWBWBWBBWBWBWBBWWBBBBBBBBBBBBBWWB", "WWBWWBWBWWBBWWBBWWBBBWBBBWWWBWBBWBBWBWBWBWWWBBWWWB"],599],
    [["BBBBBBBBBBBBBBB",
    "WWWWWWWWWWWWWWW",
    "WWWWWWWWWWWWWWW",
    "WWWWWBBBBBWWWWW"],6],
    [["BBBBBBBBBBBBBBB",
    "WWWWWWWWWWWWWWW",
    "WWWWWWWWWWWWWWW",
    "WWWWWBBBBBWWWWW"],4],
    [["BBBBBBBBBBBBBBB",
    "WWWWWWWWWWWWWWW",
    "WWWWWWWWWWWWWWW",
    "WWWWWBBBBBWWWWW"],0],
    [["BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
    "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
    "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
    "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
    "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
    "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW"],100],
    [['B'],1],
    [["WBBWWBBBWWBWWBWWBWWWBBWBBWWBBWWWBBWWWBWWWBWBBBWBWW", "BWWWWBWBBBWWBBWWWWBBBBWBWBWWBWWBBBBWWBBBBBWBWBBBWW", "BBWWBBBWWWWBBWWWWWBWBBBBBWBWBWWWWBBWWBBBWBWBBBBWWW", "BWWWWWWWBBWWBWWBWWBWBWWBWBWBBWWWBWWBBBBBBBBBWWWBWW", "BWWBWBWWBBWBBBWWBBWWWBWBWBBWWWWWWBWWBWBWWBBBWBWWWB", "WWWWWWBBWBBBBWBBWBBWBWBWBWBBWBWBWWWBWBBBWWBWWBBBBB", "BBWWBBWBWBWWBBWBBBBWBWBWBBWBBWWWWWWWBBBWWWBBBBBWWB", "WWWWBBBBBBWWWWBBBBWBBBWWWBWBWBWWWWBBWWWBBWBBBBBWWB", "WBWWWWWWWBWWBWBWBBBBWBWBBBWBWWBWWWWBWWBWBWWBWBWBBW", "WBWBWWWBWWWBWWBBBWBWWWBBWWWWWBWBWWBBBBBBBBWWBBBWWB", "BBWWBWWWBWBBWWBBBWBWBBWBBBBWWBWBWBWBBWWBBWWBBBWWWB", "WWBBBBWWWWWBWWWBWBWBWWWWBWWWBWBWBWWWWWBBWWBWWBBWBB", "BWWWWBBBWBBWBBBBWWWWWWBBBWWWBBBWWBBBBWBBBWWBBWWWWB", "BBBBWBBWBWBWBBBBBWBBBBWBWBWWBWWBBBWBBWBWWBBBBWWBBB", "WBWWWWWWWWWWBWBWBWBWWWWBWBBWBBBBBWBBBBBBBWBWBWBWBB", "WWWBWWBWBWWBWWBWWBWBWWWBWWBWWBWWWWWBBWWWBBWBWBBBBW", "BBBWBWWBBBWBWWBBBBBWWWBBBBWWWBWBBWWBBWBWWBBWWBBBBB", "WWWWBBWBBBBWWBWWBWBBWBBBWBBWBWWBWBWWWWWWBBBBBWBWBB", "WWWBWWWWWBWBBWWBWWWWWBWWWWBWWWWBBWBBWWBWBWBWBBBWWB", "WBBBWBBWBBWBWBBBBBWBBBWBBBWWWWBWWWBBWWBBBBWBWWBBWW", "BWWWBBBBBWWBBWWBWWBWBBWBWBWBBBWBWWWBBWWBWBWWWBWBWW", "BBBBWBBWBWWBWBBBBWBWBBWBWBWBWWWBBWWWWBBBBWWBWBWBBW", "BBWBBWBBWBWBWBBWBWWBBBWBWWBBBWBBBWWWBWWBWWWBBWBBBW", "BWWBWBWBWWWBBBWBBBWBWBBBBBBWBBBWWWWWWBBBBBWBWBBWBB", "BBBWWBWWBBWBBWBBWBBWBWBWWBWWBWWBWWBWBWWWBWWBWWBWBB", "WWWWWBWWBWBBBWBBWBBWBWBBWWBBWWBWWBWWWWBBBBWBBWWWBB", "BWWWBBWWWBBWWBBWWBWWBWWWBBWWWWWBBWWBWBWWBWBWBBWWBW", "WBWBBBWWBBBBBBWWBWBWBWWWWWBBBWBBWBBBWWWBBBWBWWWBBB", "WBBWWWWWBWWBWBBWWBBWBBWWBWBWWBBWWWBWWWWBBWBWWBBBBB", "WWWWWWWBWBBBWWWBBWWWWWBBBBBWBBWBWWBBBBWWWWWWWBWBBB", "BBWBBBBBWWBBBWWBBWWWWWWWBBBBBWBBWBBBBBBWWBBWBWBBWW", "WBBWBWWBWWBBWBWWBBWWBWWBBWWBWBWWBBBBBBBBBBWWWWBWBB", "WBBWBWBWBWBBBWBBBBWWWBBWWBBWBWWWWBBWWBWBBWBWWWBWBW", "BBBBBBWBBWWBWWBBWBWBWBWBWWBBWWBWBWWWBBBBWBWWBWWWWW", "WWWBWBBWBWBBWBWBWBBWWBBBWWWBBWWBWWBBBWWWWWBBBWWWBB", "BBBWBWBWBBWWBBBBBBBBWBWBWWBBBWBBBWWWWWWWBBWWWWWWWB", "BWWWBBBWWBWBBBWBBWBBWBBWWWWWBBBBWWBBBBBBBBBBWWBBWB", "WWBBBWWBBWBWWWBBBWBBBWBBWBWWWBWBWWBBBBWWWBBWWBBBWB", "WWBWBBBBWBBBWBWBWBWWWWBBWWWWWWBWBBBBBWBBWWWWWWWBWB", "WWWBBWBBBBBBWBBWBWBWBBWWBWWWWBBWBBBBBBBBBWWWBBWBWW", "WBWBWWBWWWBBWWWBBWWWBWWBBWWWWBWBBBBWWBWWBWBBWWWBWW", "WBWWBBBWBBBBBWWWWBBBWWBWBBBWBWBWWBWWWWWBWWBWWWBWWW", "BBWWBBBWWWWWWWWBBBWWWBBWBWWWBWWBWBWWWWBBWBBWWWWBWW", "WWBWWWWBWWWWBBWBBWBWWBWWWBBBBWBWWWBWBWWWWWWBWBBWWW", "BBWBWWBBWBWWWWBBWWBWBWWWBWBBBWWWBWBWBBBWWBBWWBWBWB", "WWBBBWBWBWBBBBBBWBWBBBWBBWWBBBBWBBBBBWWBWBWBWWWWWW", "BWBWWBBWBWBWBBBWBBBWWWBWWBBWWWWWBBBWBWWBBBBWBBWWWW", "WWWBBBBWBWBBBWWBWBBBBWBBBBWBBBBBBBWBBWWWBBWWBBBWWB", "BBBBBWWBBWBBWWBWWWBBBWBBBWBBBBWWWBBBWBBWWWWWBWWWWW", "WBWBBWBBWWWBWWBWWBWBWBBBWWWBBBWWWBWBWBWBWBBBBBBWWB"],145],
    [["BWWBBBBWBWBBBBBWBWBBWBBBWBWBBBWWWWWBWBWWWWBWBBBWBB", "WBWWBBBBBWWBWWWWBBBWBBBWWWBWWBBWBWWWBBWBBWBBBWWBWB", "BWWBWWWWBWBWBWBBWWBBWBWWWWWWWWWBWWBBWWBBBWBWBBBBBB", "WBBWWBBWBWBBBBWBWBBBBWBBBWBWBWBBBBWWWBWBBWWWWWBWBB", "BBBWBWWWWBBBBBBWBBBBBWBWWWWWWBBWWWBWBBBWWWWWWBWBBW", "BWWBWWWWBWWWBWBWWWBWWWBWWBBBWWBWBBBWBWWBWBWWWBWWWW", "BBBBBBWWWBBWBBBBWBBWWWWWWBWWBBBWWBBBWBBWBBBWBWBWBW", "BBWBBWWBWBWBWWWWBBBBBBWBWWWBWWBBBBWWWBWWBBBBWWWBWB", "WBWBWBBWBBWBWBBWBBBWWWBWWBBWWWBWWWWBWWWWWBBBWBBBWB", "WBBBBBWBWWBBWBBBWWBWBBWBBWBWWWBWWBWWWBBBWBWBBWWWBW", "WWBWWBWBWBBWWWBBBBWBBWBWWBBBBBWWWWWBWWBWWBBBWBBWBW", "WBWWBWBWBWBBBBBBWBBWBWBWWWBWWWWWBBBWBWWWWBWWWBBBBW", "BWBWBBBWWWWBWBBWWWWWBBBWBBBBWWBWWBBWWWBBBWBWBBWBBW", "BBWWWBWBBBBWWBWBBWBWWWWBWBBWWWBWWBBWBWWBBBWBBWBBWB", "WBWBWBBBBBBWWWWBWBWBWBBBBWWWWBWBBWBWWBWWBBWWBBWBBW", "BWBWWBBWWWWBBBBWBWBWWWBBBBWBWBWWBBWBWWWWWBWWWWBWBB", "BWWWWWBWBWWWWWBBBBBWBWWBWWBWBBBBWBWWBWWBBBBBWBBBWB", "WWWWWBWBBWWBBWWWWWWWBWWBBBBBWBWWBWWWBWBWWWBWBBWBBB", "WWWBBBBWBWWWWBWBWWBWBWWWWWBBBBWBBWBBBBBBBWWWBWBWWB", "WWBBBWWWWWBWBWBBBWWBWBBWWBWWWWWWWBWWBWWWWWBWBWBWBW", "WWWBWWBWWBWBBWWBBBBBWWWWWWWWWBBBWBBWWBWBBWWWBWWBWW", "WBWBWBBBWWWBWBWBBWWWWBBWWWWBWWWWWBWWBWWBBWBBWWWWWW", "BBBWBBWWWBBBWBWBWBBBWWBBWWBWBBBWWWWBWBBBBBWBBWWWWB", "WBWBWBWWBWWBBBWWWBBBBBBBBBWBBWBBBBWWWBWBBBWBWWBBWB", "WBWBWBWBBBWWBWBBBWWWWBBBWBBWBBWBBBWBWWWBBBWWBWBBBB", "BBWBWWWBBBWWBBWWWBWBWBBBWWWBBBWBWBWWBWWBBWWBBWBBWW", "BBBWWBWBWWWBWBWBWWBBWBWWBBBBWWBWBWBBWBBBBWWBBBBWBB", "WWBWWWWWWBBBWWWWWWWWWBWBBBWWBBBBBWBBWWBWWWBWBWWWBW", "BWWBWWBBBBWWBWWBWBWBWWBBWWBBWBBBBBWWWWBWWWBWWBBWWW", "WBWBBWWWBWWWWWWWBBWBWBWWWBBBWWBWWBBWBBBWBBWBWWWBBW", "WWBWWBWWBBWWBBWBWWBBWBBBBBWBBWWWBWBWBWBWWWBWWWBBWW", "WWBWWBBBWWBBWBWBWWWBWWBBWWWWBBBBWWWBWWBWBBWWWWWBBB", "BWBBBBWBBWBWBWBWWWWWWBBWWWBWBBWBBWWWWBWBBBBWBBWWBW", "BBWWWBBBWWBBWBBBBWWWWWWWBWWWWWBBWBWWWBWBBWBBWWBBWB", "WWWWWWWWBBWBWWBBWWBBWWBWWWWWWBBWWBWWBBBWBWBBBBWBWB", "WBBWWBWWBWBBBWWWBBWBBBBBBBWBWBWWWBWBWWBWBBWWWWWWBB", "WWBBWBBWWWBBBBBBWBWBWWBWBWWWWBWBBBBBBBWBBBBBWBWWBW", "BWBBBBWWBWBBWWWBWBBWBWBWBWBWWBWBBWBWWWWBWBWBWBBBWW", "BWBWWWBWBWWWBWWWBBBWWWWWWWWBWBWBWBWWWWBBWWWWBWWWWW", "BWBWWWWWWBBBWWBWBBWBWWBBBWWWBWWWWBBBWBBWWWBWBBWWWB", "BBBBWBWWWWWWBWWWWBBBBWWWWBWBBWBBWBWWBBWBBWWBWWBWWW", "WWWWWBBBBBBBWBWBWBBBWWBWBWWBBBBBWWWWWBBBWBWBBWWWBW", "BWWBBWBBWWBWBBWBWWBWBBBWBWWWWWBWWBBWWBWWWBBBBBBBBW", "WWBBBBWBWWBBBWBBBWWWBWBBWWBWWWBWWWBWWBBBBBBWBBWWWB", "WWBWWWBWBWWWBWBBBBBWBBWWWBWBBWWBBWWWBWBWWWWBBBWBBW", "WBBBBWWWWWWWWWWBWBWBWWWWBWWWBBBBBBBWWBWWWWBWBWWBBB", "BWBBWBWBBBWWWBBWBWWWWBBWWWWBBWWBWWBBBWBWBWBWBBWBWW", "WWWWWWWBWBWWBBWWWWWWWBWBBBWBWWWBWBWBBWBWWBBWBBWWBW", "WBBWBBBBBWWWBWBWWBWWWBWWWWBWWBWBBWWBBWBWWWWWBBBWWW", "WWWWBWBWBBBWBBWWWBWWWWBWBBWBBBBWBBBWWBWWWBWBWBBBBB"],448],
    [["BWBBWWWBBBBBBWWWBBWWBBWBWBBBWBBBWBWWBBBBBBWWWBBBWB", "BBBWBBBBBWWBWBBWBBWWWBWWWWWWWBWWWWBWWWBBBBBBBWBBWW", "WBWBWBWBBWWWWWBBBBBBBWBWBBBWWBWBWBBWWWWWWBBBBWWBBB", "WBBBWWBWWWWWBWWBWBBBBBBWWBWBWWBWWBWWBWBBBWWBWWWWWW", "BWBBBWBBWWBBBWWWWWBBBWWBWWWWWBBBBBBWBWBWBBWBBBWWWW", "WBBBBWWWBBBBWBBBWBBWWBBWWWWWBBWBBWBBWWBWBWBWWWBBWW", "WBBWWWBBWWWWWWWBBWWBWBBBBBBWWBWBWWWWWBWWBBWWWBWBBB", "WWBWBWBWWWBWWWWWWWBWWWBWBWWWBBBBWBBBWWBBBBWWWBWBBB", "BBBWBWWBBBWBWBBBBWWBWBWWBWWBWBBBBWBWBBBWBWWBBWBBWW", "BWWWWWBBWWBBWBWWWBBBBWBBWBBWBWWWBBWBBWBBBBBBWBBBBW", "WBBBBBBWBBWWBWBBWBBBBBWWBWBWWWBWWWBBBWWWBWBBWBBWWW", "BBWWBWWWWBBBBWBWWWBWBWBBBBWWWBBWWWWWWBWBBWBBWWBWBW", "WWWBBWBWWBBBBBBWBBBWBBBWBWBWWWBBWWBWWWWBBWWBBWWWBB", "WWWBBBBWBBWWWBBBBWWWWBBWBWBBBWWWWWBBWBWWWBWWWBWWBW", "WBWWWWWBBBWWWBWBBWWWBWBWBWWBBBWBWBWBWWBWWWBWWBBWWB", "BBWBWWWWBBWBBWWBWBWBWBWWWBWBWWWBWBWWWWWBWWWBWWWBWW", "BBBWWWWWBWBBWWBBBWBWWBWWWBBWBWWBWWWBBWBBWBBWBBWBBW", "BWBBBBBBBBWWBWWWWWWBBBWWWBBBBWWBBWWWWBWBWWBBWBWWBW", "BWBWWBWBBWWBWWWBWWBWWWBWWBBBBWWWBBWBBBWBWWBWWWWWBB", "BWWBBWBWBBWBBWWWWBBWBBBBWBWBWWWBWBWWWWWWWBBWWWWWBW", "WWBBWBWWBBBBBBWBBWBWBBWWBWBBWBWWWBBWBBWWBBBBWBBBBB", "BBWBWBBBBWBBWBBBBWWWWWWWWWBBWWBWWBBWBWWWWWWBBWWBWB", "WBBWWBBBBBWWWWBBWBWWWWBBBWBWBBWWWWWWWBBBWBBWBBWWBB", "WWWBWWWBBBBBWWWBWWWWWWWWWBBBWWBBBWBWBWWWWWBWWWWWWB", "WWWWBBBWWWBBBWWWBWWBBWBBWWWBBBBBWWWBWBBBWWWBBWWBWB", "WWBWBWWWWBWWWWBWWWBWWWWWWBBBBWBBBBBWWBWWWWBWBBWBBW", "BWWWBWWWBBWBBWBBBWBBBWBWWBWBWBWBBBWWWWWWWWBBWBBWBW", "BWBBBBBBWBWBWBBWWWBWBBBBWBBBWWWBBWWBBWBBBBWBWBWBBW", "WBWBBBWBWBWWWBBWWWWWWWBWBBWWWBBWWWWWWBBWBBWBWBWBWB", "WWWWWBBBWBBWBWWBWBBWBWWWBBWBWWBWBBBBBBWBWWBWWBWWBW", "BBBWBBBBWWWBWWWBWBBWWWWBBBWWWWBWBWWBWWWWBWBWWBBWBW", "WBWWBWBWBWBWWWWBWBBBWBWWWWBWWBWWBBWWBBBBWWBBBBWWBB", "WWWWBWBWBBBWWWWBWBBWWWBWBBBBBWBWWBWBWWWWWBWWBWWBBW", "BWBWBWBBWBBBWWBWWBWBBWBBBWWBWWBWBWWBBWWWBWBWBWBWBW", "BWBBWWBWBWWWWBBBWBBBWWWBWBBWWWWWWWWWWBWWBWBWWWBBBB", "WBBWBWBWWBWWWWBWWBWBBWBWWBBWBBBBWWBBWWBWWWBWWBBWWB", "BWBBBWBWBWBBBBBBBWBBBWWBWWWBBBWWWWBWBBBBBBWWWWWWWW", "BWWBWWBBWBWBWWBBBBWWWWBBWWBWWBWWWWBBBWBBBWWWBBBBBB", "BWBWWBWBWWBWBWBBWWWWWBBWWBWWBBWWBWWWBBWWWWWWWBWWWB", "BWBWBWBBBWBWBBBBBBBBBBWBWBWWWWBWWWBWBWBBBBWBBWBWWW", "WBWWBWBWWBBBWWWBWBBWWBWWWBBBBWWBBBWWWWBBBBWBWWWWBW", "WWBBBBBBWBBBWBWBWBBWBWWWBBWBBWWBWWBBWWBBBBWWWWBBWB", "WWWBBBBWWBWBBWBBBWBWBBWWBBWBBWBWBBWBWBBBBWBBBWBWWB", "WBWWWWWBBBWWBBWWBWWBBWWWBWBWBBWWWBBWWWBBBWWWWWBWBB", "WWBBBWBWWBWWWWBWWBWBWBBBBBBBWBBBWWWWBBWBBWBWBBBWBB", "WBBBWWBBWWWWBBWBWBBWBWBWWWBWBWBWBBWBBWBBBWBBBWWBWB", "WBBBBWWBWWBBBBWWBWWWWWWBBBBBBWWBBWBBWWBWBWWBBWWBWB", "WBBWBBBWBBWWBBBBWWWWBBBBBWWWWWWWBWWBBWWWBWBWBWBWWB", "WBBWBWBBBBBWBBBWBBBBBBBWBWWBBBWWBBBWBWBBWWWBWBWWWB", "WWWWWBWWWWWWWWWWWBWBBBBWWWBBBWBWBBBBWBBBWWBBBWWBBW"],176],
    [["WWBWWBWBBBBBBBBWBWWBBWBWBWBBWWWWBBWWWBBWBWBBWBBWBB", "WBWBBBBBWBWBBWBWBWWBBBWBWBBBBBWWWBWBWBWWBWBBBBBBBB", "BWBWBWBWBBBBWWWWWWBWBWBBWBBWBWWBWWWBBBWWWWBWWBBBWB", "WBBWWWBBBBWWWBWWWWWWWWBWWWWWBBBBBWWBBWBBWBBBBWWWWB", "BWBWBBBWBBBBWBWWWWBWWWWBWBWWWBBBBWBWWWWBBWBBBWWBBW", "WWWBWBWWBWBBBBBBBWWWBBBWWBBWWWBWWBBWBWWWWBBBBBBBWW", "WBBBBWWWWBWBBWBWBWBBWBWBBBWWWBWBBBWWBBBWBBBBBBWBBB", "WBWWBWWWWWBWBWBBWWWWWWWBWWWBBWWBBBWWBBWBWBWWWWBBBB", "WBBWBWWBBWWBBWBWWBBWBWBBBWWBBWWBBBWBBWBBBWWWWBBBWB", "BWWWWBWWBWBBWBBWBBBWBBWWWWBWBWBWBBWWWBWBWBBBBWWWBW", "WBWBBBWBBWWWBBBWBBBWWWWBBWBWWWWBWWWWWBWBBBWWWBBWBW", "BBWWBBWWBWBWBBWWBBBWBWBBWWWBWBWWWBBWBBWBBWWBBBWBBW", "BWWWWWWBBWWWWBBBBBBWWWWBBBBWBWWBWWWBWWWWBWWBWWBBBB", "WBWWBWBWBBWBWBWBWWWWWBWWWBWWWBBWBBBWWBBWWBWBWWWWBB", "WWWBWBWWBWBWWBWWWWWWWBWBWWWBBWBBBWBBWBWWBWBWWBWWWB", "BWWBWBWBWBWWWWBWWWWBBWBWBWBWWWWBBWWBBWBWBBWBBWBWWW", "WWWWWWWWWBBWWBWBBWWWWWBWWBBWWBWBWWBWBBBBBBWBWWWWWB", "WBBBBWWWBBBWWWWBBWWWWWBWWWBWBBWWWBWBBWWBBWWWWBBWBB", "BWWBBWBBWBBWWBWWBWWWBWWBBBWBBWWWBBWWWBBBWBBWWWWBBB", "BBBBBWBBBBBWWWBBWBBBBWWBBWBBWWWWWWBWWWWWBWWWBWWWBW", "WBBWBWBBBWWWBBWBWBBBBBWBBWBBBBWBWWBWBBBBBWBWWWBWWB", "BWWWBWBBWWWBBBBWBWWWBWBWWBBWWBBBWBBWBBBWWBBWWWWWBB", "WBWWWBBBWWWWBWBWWBBWBWBBBWWBBBBWBWWWWWBWWWWBWBBBBW", "BBBBBWWWWBBWWWWWBBWBBBBBWBWWBBBBBWWWBBBWWWWBWBBWWB", "BWWBBWWWWWBBBWBWWBWBWBWWBBBWBWWWWWWWWWWWBWWWBWWWWB", "WBBBWBWBWBBWWBBWWWWBBBBWWBWWBWWBWWWWBBWBWWWWBWBWBB", "BWBBWWBWBBWWWWWWBBBBWWBBWBBWWBWBBBWBBWBWWWWWBWBBBW", "WBWWWWWBBWWWWBBBWWBBBBWBBWBBBBWBWBWBWBWWWWBBWBWBWW", "BWWWWWWWWWWBWBWWWBWWWBBBBWWBBWWWBBBBBBWBBWBWBBWBBW", "WWBWWBWWBWWWBBBBWWBBBWBBBBWBWWWBBBWBBBWWBBWWWBBWWB", "BBBBWWWWWWWBWWWWWBWWWBWBWBWBWWBBWBBWBWWBBWBBWWBWBB", "BWWWWWBBWBWBBWWWWBBBWBBWBBWWWBBBWWWBWBBWWBBBWBWBBW", "BBWBBBBBWWWBBBWWBWBWWBBBWBBWBBWBWWWWBWWBWBWBWWWBWB", "WBWWWWWBWWWBBBWBBWBWWBWWWBBWWBWBWBWBWBBWWWWWWWWWWB", "BBWBBBBBWWBBBBWBBWBBBBBBWBWWBBWBBWWBBWWBBWWWWWWBBB", "BWWBWWBWWWWBWBWBWWBBBBWBBWBWWBBWWWWBBWWBWWWBWBWWBB", "BWBWBWBWBWWWWWWBWWBBWWWBBBBBBBWWBBBBBWWBBBWWWBWBBW", "WWBWWWWWWWBWWBWBWBWWWBWWBWBBWBBWBBWWWWBWWWBWBBBBWW", "BBBWWBWWBBWWWBBBBBBWBWWWWBWBBWWWWWBBWWBBWBBWWBBWBW", "BBWWWBWWWWBWBWBBBWWBWWWWWBBWWWBWBBWWWWBBBBWWBBWWWW", "BBWBBBWWWWBWBWWWWWWBBWWBBBWWWBWWBWBBWBWBWBWBBBBWBB", "BBWWWBWBWWWBWBWWBBWWBWWBBBWBWBWWWWBBWWWBBBBWBWWBWW", "BBBBWBWBWBBWWBBWWBWWWBWBWBBBBWBWWBBWWBWBWWBWWBBWWW", "BWWWWWBWWWWBWBBWBBBBBWWWBWBBBWWBWWWWBBBBWWWWBWWWWB", "WBWWWWWWWWWWBWWBWWBBWWWWBWWBWBWWBBBBWBBWBBBBWBBBBW", "WWWWWWBBWBWWWWBBWBBWWWBWBBBBBWBBBBWBWBWBBWWWWBBWBB", "BBWWWBBWWWWWBBBBWBBBBBWWWBBWWWBBWWWBBBBBBBWBWWWWBW", "WBBWBWBBBWBWWBWWWBBWBBWWBWBBWWBBBWWBWWBWBWBBWWWBWB", "BBWWWWWBBBBBWWWBWWWBWWBWBWWBWWBBBBBWBBWWWBBBWWWBWB", "BBBWBWBWWWBWBBBWBBBWBBBBWWBWBWBBWWWBWWBBWBBBWWWBWB"],490]
]
let r=0
testcases.forEach(([t,k],i)=>{
    let res=minipaint(t,k)
    if(res==results[i])
        console.log(res,'\t==\t', results[i], '\tMCCOOL')||r++
    else 
        console.log(res,'\t!=\t ', results[i], '\tBALD')
})
console.log(`ACCEPTED: `,r,'/',results.length)