
/*
                                            --Diminishing returns--
    when you notice concavity among the function you want to calculate
    WQS is applicable,
    
    The task is to calculate f(k), k being the number of tools ure using

    When you re increasing the tools, the gain (delta) is dropping/increasing (convexity/concavity)
        f(i+1)-f(i)>f(i)-f(i-1) or
        f(i+1)-f(i)<f(i)-f(i-1)

    Then you binary search over an incurred COST p for using 1 extra item. How many more items are you willing to use if for each one you have to pay a fixed value p instead??
    
    
    for each cost of the binarysearch 2 things will be calculated:
    [optimalSol,count]
    the optimal solution I found after having to pay p for each tool I used, 
    the count of tools I used for that optimal solution

    if the count===k, then I can consider the solution : optimalSol - p*count, p being
    if the count >k then i should increase my p so that my calculations find less items for the optimal solution
    if the count <k then i should decrease my p so that I  can choose more items. 

    //Essentially on the binary search you re solving a different problem, what if you had Infinite tools, but you had to pay a fixed cost per tool? How many would you take then in order to find the best answer? 
    // If the number of tools you found is bigger than that u want, increase the cost so ur logic picks less items
    // if its smaller, decrease the cost so you pick mroe of those 
*/

/*
    If the cost function  of a dp recurrence satisfies the quadrangle inequality then the recurrence is convex/concave 
    //http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/sdarticle_204.pdf proof
*/

/*
        https://soi.ch/wiki/alien-optimization/ 
    if F is convex/concave  <=> f(x)-f(x-1) >=< f(x+1)-f(x)

    if you want f(k) =min/max time/cost/energy to do something with k items
    but instead you can calculate 2  things:
        1) g(l)=min/max time/cost/eneergy to do something with Infinite items available, but when each item costs l time/cost/energy 
        2) kopt= the number of items for which g(l) minimizes/maximizes
        
        Then I can exploit the fact that :
            1)g(l)=f(kopt)-l*kopt
            2) and l1>l2 => k1>k2   (from convexity)
        
        and binary search on l, to find the when the kopt=k and return the naswer
        min(F(x+1)-F(x)) <= l <= max( F(x+1)-F(x))

        the answer will be f(kopt)= g(l)+l*kopt from (1)
*/


/*  Visit Anai's site when it's up 

https://codeforces.com/blog/entry/68778#

/*/