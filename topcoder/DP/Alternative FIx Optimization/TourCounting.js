// Notes
// -	The answer modulo m means that you must return the remainder of dividing the result by m.
 
// Constraints
// -	g will have between 1 and 35 elements, inclusive.
// -	Each element of g will have exactly N characters, where N is the number of elements in g.
// -	Each character of each element of g will be 'Y' or 'N'.
// -	The ith character of the ith element of g will be 'N'.
// -	k will be between 1 and 1000000 (106), inclusive.
// -	m will be between 1 and 1000000000 (109), inclusive.


//tldr, return the number of distinct cycles of length <k  ,%mod
// a cycle can contain non distinct elements.
                                                //O B S E R V A T I O N
// when powering the adjacency matrix of any graph to the kth power, what we get in the position (i,j) of the result is the number of paths from i to j that have exactly k steps."
// so in order to find cycles I just have to count all the DIAGONAL elements, cos they are cycles. 
let matrixMult=(A,B,mod=1e9+7)=>{
    let n1=A.length,m1=A[0].length,n2=B.length,m2=B[0].length
    //A*B
    if(m1==n2){
        let M=[...Array(n1)].map(d=>[...Array(m2)])
        for(let i=0;i<n1;i++)
            for (let jj = 0; jj < m2; jj++){
                let res=0
                for(let j=0;j<m1;j++)
                        res= (res+A[i][j]*B[j][jj])%mod
                M[i][jj]=res
            }
        return M
    }
    //B*A, if A*B is not possible
    if(m2==n1)
        return matrixMult(B,A)
    return 'Impossible'
}
let binexpMatrix=(A,k,mod=1e9+7)=>{
    let curr=A,n=A.length,m=A[0].length,result=[...Array(n)].map((d,i)=>[...Array(m)].map((d,j)=>Number(i===j)))
    if(n!==m) // we can only exponentiate square matrices
        return 'Impossible'
    while(k){ //using binary exponentiation
        if(k&1)
            result=matrixMult(result,curr,mod)
        curr=matrixMult(curr,curr,mod)
        k>>>=1
    }
    return result
}
//simple multiplication, TLE O(k*n**3)
let countTours=(graph,K,mod)=>{
    graph=graph.map(d=> d.split('').map(q=>Number(q==='Y')))
    let result=0,n=graph.length,M=[...Array(n)].map((d,i)=>[...Array(n)].map((d,j)=>Number(i===j)))
    for( let k=1;k<K;k++){
        M=matrixMult(M,graph,mod)
        for (let i = 0; i < n; i++)
            result=(M[i][i]+result) %mod
    }
    return result
}

//dynamic programming
/* apparently creating a new matrix of length 2*n 2*n
        [  graph  |  0  ]       where I is the Identity matrix
        [    I    |  I  ]

    and exponentiating that to K gives the result
        [  A  |  B  ]       where our required result 
        [  C  |  D  ]       is the Sum of the Diagonal of C

    
    let us fix the start of the path first
    let the start be the vertex 0
    then, for each end vertex of the path k
    dp[k][l] is the number of paths of length l that start at 0 and end at l 
    dp[k][lengthOfPath]=SUM(dp[u][lengthOfPath-1] * Adj[u][k] ), which means that u is adj to k 
    

*/
let countToursDP=(graph,K,mod)=>{
    graph=graph.map(d=> d.split('').map(q=>Number(q==='Y')))
    let n=graph.length,
    RES=[...Array(2*n)].map((d,i)=>[...Array(2*n)].map((d,j)=>{
            if(i<n&&j<n)
                return graph[i][j]
            if(i>=n&&j>=n) 
                return Number(i===j)
            return Number(i==j+n)
            }
        ))
    RES=binexpMatrix(RES,K,mod)
    let result= (-n%mod+mod )%mod //subtract the empty cycles
    for (let i = 0; i < n; i++) 
        result= (result+RES[i+n][i]) %mod
    return result
}
let test=[

    [
        ["NYNY",
        "NNYN",
        "YNNN",
        "YNNN"  ],6,100
    ],
    [
        ["NYNY",
        "NNNN",
        "YYNY",
        "NYNN"],1000000,1000000000
    ],
    [["NY",
    "YN"],1500,1],
    [["NYYNYYN",
    "YNYNYNY",
    "NYNYNYN",
    "YYYNYNY",
    "NNYYNNY",
    "NYYYNNY",
    "YYYYYYN"],30,100],
    [["NYYY",
    "YNYY",
    "YYNY",
    "YNYN"],1000,10000],
    // [["NNNNNNNNNNNNNNYNNNYNYNNNNNNNNNNNNNY", "YNNNNNNNNNNNNNYNNNNNYNNNNNNNNNNNNNY", "NNNYYNNYYNYYYNYNYYYNYNNNYYYYNYYNYYY", "YYNNNNNYNNNYNNYNNYYNYNNNNYNNNNYNNNY", "YYNYNNNYNNNYNNYNYYYNYNNNNYNNNYNNYNY", "YNYYNNNNYYYYYYYYYYYYNYYYYYYYYYYYYYY", "YYYYYNNYYNYYYYYNYYYYYYYYYYYYYNYYYNY", "YNNNNNNNNNNYNNNNNNYNNNNNNYNNNNYNYNY", "YNNYYNNYNNYNNNYNYYYNYNNNYNYYNYYNYYY", "YYYYNNNNYNNYYNYNNYYNYNNNYYYYNYNNYNY", "YYNYNNNYNNNYNNNNNYYNYNNNYYNNNYNNYNY", "YNNNNNNNNNNNNNYNNNYNYNNNNNNNNNNNNNY", "YYNYYNNYYNYYNNYNYNYNYNNNYNNNNYYNYYY", "YYYYYNNYYYYNYNYNYYNYYNYNYYYYNYYNYYY", "NNNNNNNNNNNNNNNNNNYNYNNNNNNNNNNNNNN", "YYYYYNNNYNYYYYYNYYNYYNNNYNYYNYYYYNY", "YYNYNNNYNNYYNNNNNYYNNNNNYYNNNYYNYNY", "YYNNNNNYNNNYNNNNNNYNNNNNNYNNNNYNYNY", "NNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNN", "YYYYYNNYYYYYYNYNNYYNYNNNNNNYNYYNYYY", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "YNYYNNNNYYYYNYYNYYYYYNYNYYYYYYYYNYY", "YYYYYNNYYYYYYNYNNYNYYNNNYYYYNYNNYNY", "YNYYYNNYYNYYYYYNYYYYNNYNYYNYYYNNYYY", "YYNYNNNYNNNYNNYNNYNNYNNNNYNNNNYNYNN", "YYNNNNNNNNNNNNYNNNYNYNNNNNNNNNNNNNY", "YYNYNNNYNNNYNNNNYYYNYNNNYYNNNYYNYNY", "NNNNYNNYNNYYNNYNYNYNYNNNNYYNNYYNNYY", "YYYNYNNYYYYNNNYNYNYYYNYNYYYYNYYNYYN", "YYNYNNNYNNNYNNYNNYYNYNNNYYNNNNYNYNY", "YYNNNNNNNNNYNNNNNNYNYNNNNYNNNNNNYNY", "YYYNYNNYYYYYYNNNNYYYYNYNYYYNNYYNNYY", "NYNNNNNNNNNYNNYNNNNNYNNNNYNNNNNNNNY", "YYNYYNNYNNYYNNYNYYYNYNNNNYYNNYYNYNY", "NNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNN"],999993, 999999996],
    [["NNYYYYYYNYYYYYYYYYNYY", "YNYYYNYYYYNYYYYYNNYYN", "YYNYYYYNYYNYYYYNYYYYY", "NYYNNYYYYYYYYYYYYYYYN", "NNYYNYYYYYNYYYYYYYYNY", "YNYYYNNYYYYYYYNYYYYYY", "YYYNYYNYNYNYYYYYYYYYY", "YYNYYYNNNNYYYYYYYNYYN", "YNYYYYNNNNYYYYNYYYYYN", "NYYYYYYYYNYYNYYNYYYYY", "YYNYYNYYYYNYYNYYYYYYY", "YYYYYYYNYYYNNYNYYYYYY", "YYYYYNYNYYYYNYYYYYNYN", "YYYYYYYYYYYYYNYYYYYNN", "YYYYNYNNNYYNYYNYYYYYY", "YYNYNYYNNNYYYYYNYYNYY", "YYYYYNYYNYYYYYYYNNYNY", "YNYYYYYYYNNYYYYYYNYYY", "YYNYNYYYYYNYYYYYYYNYY", "NYYYYYYYYYYYNYYYYYNNY", "YYYYYYNYYNYYYYYNYYYNN"],153023, 425942388],

    [ ["NYYYYYYYYNYYYYYYNYYYYYYNYNYYYYY", "NNNYYYYYYYYNNYYYYYYYYYYYYYYYNYY", "YYNYYNYNYYYYYYNYYYYYYYYYYYYNYYY", "YYYNYYNYYYYYYYYYNYYYYYYNYYNYYYY", "YNYYNYYYYYNYYYYYYYYYYYYYYYYYYYY", "YYYYYNYYNYYYNYYNNNYNYYNNYYYNYYY", "YYYYYYNYYYYYYYYNYYYYNNYYYNYYYYY", "YYNYYNNNYYYYYYYNYYYNYYYYNYYYYYY", "YYYYNYNYNYYYYNYNYYNYYYYYYYYYYYY", "NNNYYYYYYNNYNYYYNYYNYYYYYYYYYYN", "YYNNYYYYYYNYYYYYYYYYNYYYYYNYNYY", "YYYYNYYNYYNNYYYYNYNYYYNYNYYYYYY", "NYYYYYYYYYYYNYYYNNYYYYYYYNYYYNY", "NYYYYYYNYYYNYNYNYNYYNYYYYYYYYYN", "YYYNNNYYYYYNNYNYYYYYNYYNYNYYYYY", "YYYYYYYYYYYYYYYNYYYNYYYYYYYYYYY", "YYNYYYYYYYNYYYYYNYYYYYYYYYYNYYY", "NYYNYYYYNYNYYYNYYNYYYNYNYYYYNYY", "YYNYYYYYNYNYNYYYYNNNYYNNNYYNYYY", "YYYYYYYYYYNYYYNNYYYNYYYYYYYNYYY", "NNYYYNYYYYYYNYYYYYNYNYYYYYYYYYY", "YNYYYYNYNNNYYYYYYYYYNNYYYYYNYYN", "NNYYNYYNYYNYYYYYYYYYNYNYNYYYYYY", "YNYYYYYYYYYYNYYYYYYYYYYNNYYYNYY", "NYNYYYNYYYYYYYNYYYYYYYYYNYYYYYY", "YYNYYYYYYYYNYYNYYYYYYYYYYNYYYYY", "YYYNYYYYYYYYYYYYYYYYYYYYYYNYYYY", "YYYNYYYYYYYYYNYYYNYNNYYYYYYNNYY", "YNNYYNNYYYNYNYYYYNYYYYYYYYYNNYY", "YYYYYYYYYYYNYYYYYYNYYYYYYYYNYNY", "NYYYNYYNYYYNYNYYYYYYYYYYYYYNYYN"], 903622, 492470979],
    [["NNYYYYNNYYYYYYYYYYYNYYYYNYYYY", "YNYNYNYYYNYYYYNYNNYYYYYYYYYYY", "YYNYYYNYYYYNNYYYNYYYNNYYYNNYY", "YYYNYYYYNYYYYYYNYYYYYYYYYYNYY", "YYYNNYYYYYYYYNNNYYYYYYYYYNNNY", "YYYYYNNYYYNYYYNYYYYYYYYYNYYYN", "YYYNNYNYNNYYNNNYYYYYYNYYNNYYY", "YYYYYYYNYYYYNYYYNYYYYYYYYNYYY", "YNYYYYYYNYYYYNYYYYYYNYYYYYNYY", "YYYYYYYNYNYYNNYNNYNYYYNYYYYYY", "NYYYYYYYYYNYYNYNYNYYYYYYYYYYY", "YYYYNYYYYNYNYYYYYYNNNYYYYYNYY", "NYYYNYYNYYYYNYYYYYNYYYYYYYYYY", "NNYYYYNYYYYYYNYYYYYYYYYYYNYYY", "YYYYYYYNNYNNYYNYYYNYYYYYNYNYY", "YYYYYNNYYYNYYYNNNYNYYYYYYYYYY", "YYYYYNYNYYYYNYYYNYYYYYYYYYYYN", "NYYYYYYYYNYYYYYYYNYYYYYYYNNYY", "YYYNNYYYYYYYYNYYYNNYNYYNYYNYY", "YYYYYNNYYYYYYYYYYYYNYYYYYYNYY", "YNYYYYNYYYYYNYNNYNYNNYYYYYYYY", "YYNYNYNYYYNNYYNNYYYYYNYNNYYYN", "YYNYYYYYNNYNYYNYYYYYYYNYYYYYY", "YYYYNNNYYYYNYYNYNYYNYYYNNYNYY", "YNYYYNYYYYYYYYNYYYYYYNYYNNNYY", "YYYYYYYNYYNYYYYYYYYYYYNYNNYYY", "YYNYYYYNYYNYNYYYYYYYYYYYYYNYY", "NYNYNYNNYYYYYYYYYYYYNYNNYNYNY", "YYYYYYYYYYYYYYYYNYYYYNYYYNYYN"],431477, 974881204],
    [["NYYNNYNYNNNYNYYYNYNYYYNYNNYYYNNNY", "YNNYYYYNNYNNYYNNNNNYYNYYNNNNNYYYN", "NNNNYYNNNNNYNNYNNYNNNYYNYNNYNYNYN", "NYYNYYNYNYNNNYYNNYYNNYYNYNYNYYNNN", "YNNYNNYNYYYYNNNYNNNNYYYYYNYYNYNNN", "YNNYNNYNYYNNYNNNYYNNNYNYYNNNNNNYN", "YYYYYNNYYNYYYNYYNYYYNYYYYNNYYYNNY", "YNNYNNNNYYYNYNNNYNYNYYYNNYYNNYNYY", "YYYYNYNNNYYYNNNYNNYNYNNYNNNNYNNNN", "YNYYYNNYYNNNNNYYNNYNNNNYYNNYYNYYY", "YNNYYNYNYNNNNYYYNNYNYNNYYYNNNNNNY", "YNYNNNYYYYYNYNNNYNNNNYNNYNYYNYNNN", "YNNYYNYNYYYYNYNNNNNYNNNYNNNYYYNYY", "NYYYNYYNNNYNYNYYYNNYYNYYNNYYNNNNN", "YNNNYNYNNNNNYNNYYYNNNYNYNYNNYYYYY", "YYNNYNYYYYNYYYYNNYNNYYYYYNNNNNYYN", "YNNYNNNNNNNYYNNNNYNYYYYYNNYNYNYNN", "NYYNYNYNYYYYYNNYYNYYYNYYNYNYNNYNY", "NNNYNYNYNYNNYNNNYYNNNNYNYNYNYYNYY", "YYNYNYNNYYYNYNNNYYNNNYNYYNYNYYNNY", "YNNYYNNNNNNNYNYNNYYYNYNYYYYNNYYYY", "YYNYNNYYNYNYNYNNNYYNNNYYNYNNNNYYY", "NYYYNYYNYYYNNYYNYYYNYNNNNYYYYYNNN", "YNYYNNYNYYNNNYNNNYNYYYNNYYNYYNNYN", "YNNYYYNNYYYNNYYYYNYYNNNNNYNNYYNNY", "NNYNYNNNYNYYYYYNYNYNYNNNNNYNNNNYY", "NYNNYNNYYYNNNNNYYYYNNNNYNYNYNYYNN", "YYNYYYYNYNYNNNNNNNYNNYNYYYYNYNNNN", "NYNYYNYNYNYNNYNNNNYNNNYYNNNYNNYYY", "YNYNNNYNYNYYNYNYYNNNYNYNNYNNNNYYN", "YYNNNYNYYYYYYYYNNNYNNNYYYNNYYYNNN", "NNNYYYNYNNYYNYNNYNYNNYYNYNYNYNNNY", "YNNNYNYNNNNNYNYNYYNYNNNNNNNYNNYNN"],471606, 791902111],
    [["NYYNYNYYYNNYYYYNYNNYN", "YNYNYYNYYYYNNYYNNNNYN", "YYNNNYNNYYYYYNYYYNNYY", "YNNNYNNYYYYNYNYYYNYYY", "YNYNNYNYYNNNYNNYNYNYY", "YNYYNNNYNNYYNNNNNNYNY", "YYYNYNNYYNYYYYYYNYNYN", "YNYYYYYNNYNNNYNNNYNNN", "NYNNNYNNNYYNNNNNYNYYN", "NYYNYYYYYNNNNYYYNNNNN", "NYYYNNYNYNNNYYYYNNNYY", "NNNYNYNNYNYNYNNYNNNNN", "YYYYYYNNNYYNNYYNNYYNN", "YNNYYYYYYNYYYNYNNYNNY", "YYYNYNYYYYYNNYNYYNYYY", "YYYNYNYNNYYNNYNNNYYYY", "YNYNYNYYNNNNNNNYNYYNY", "NNNNYNYNYYNYNYYNYNNYN", "NYNYYNNNYNYYYNNYYYNYY", "YYYYYNNYNYYNNNNYNNNNN", "YYYNNNYNNNNYYYYYYNNYN"],592494, 492046793],
    [["NYYYYYYYYYYYYYYYYYYYYYYNYYYYYYYYYYY", "YNYYYYYYYYNYYYYYYYYYYYYYYYYYYYYYYYY", "YYNYYYYYYYYYYYYYYNYYYYYYYYYYYYYYYYY", "YYYNYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYNYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYNYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYNYYYYYYYYYYYYYYYYYYYYYNYYYYYY", "YYYYYYYNYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYNYYYYYYYYYYYYNYYYYYYYYYYYYY", "YYYYYYYYYNYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYNYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYNYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYNYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYNYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYNYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYNYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYNYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYNYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYNYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYNYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYNYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYNYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYNYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYNYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYNYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYNYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYNYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYNYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYNYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYNYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYNYYYY", "YYYYYYYYYYYYYYYNYYYYYYYYYYYYYYYNYYY", "YYYNYYYYYYYYYYYYYYYYYYYYYYYYYYYYNYY", "YYYYYYYYYYYYYYYYYNYYYYYYYYYYYYYYYNY", "YYYYYYYYNYYYYYYYYNYYYYYYYYYYYYYYYYN"],987654, 987654],

    ,
    [["NYNNNNN",
    "NNYNNNN",
    "NNNYNNN",
    "NNNNYNN",
    "NNNNNYN",
    "NNNNNNY",
    "YNNNNNN"],40,13],
]


// console.log(
//     test.map( ([a,b,c])=>countTours(a,b,c))
// )
console.log(
    test.map( ([a,b,c])=>countToursDP(a,b,c))
)